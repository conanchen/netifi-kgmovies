directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

directive @dgraph(
  type: String
  pred: String
) on OBJECT | INTERFACE | FIELD_DEFINITION

directive @id on FIELD_DEFINITION

directive @hasInverse(field: String!) on FIELD_DEFINITION

input AddCommentInput {
  identifier: String
  name: String!
  alternateName: String
  description: String
  parentItem: ThingRef
  author: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。
  """
  dateCreated: DateTime
}

type AddCommentPayload {
  comment(
    filter: CommentFilter
    order: CommentOrder
    first: Int
    offset: Int
  ): [Comment]
  numUids: Int
}

input AddConversationInput {
  identifier: String
  name: String!
  alternateName: String
  description: String
  about: ThingRef
  accountablePerson: UserRef
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  includedInDataCatalog: DataCatalogRef
  hasParts: [MessageRef]
  webhook: [WebhookRef]
}

type AddConversationPayload {
  conversation(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]
  numUids: Int
}

input AddDataCatalogInput {
  identifier: String
  name: String!
  alternateName: String
  description: String
  parentDataCatalog: DataCatalogRef
  subDataCatalogs: [DataCatalogRef]
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

type AddDataCatalogPayload {
  datacatalog(
    filter: DataCatalogFilter
    order: DataCatalogOrder
    first: Int
    offset: Int
  ): [DataCatalog]
  numUids: Int
}

input AddEntryPointInput {
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
  【链接模版】 一个URL的模版，可以利用变化参数形成完整的URL。 An url template (RFC6570) that will be used
  to construct the target of the execution of the action.
  """
  urlTemplate: String
}

type AddEntryPointPayload {
  entrypoint(
    filter: EntryPointFilter
    order: EntryPointOrder
    first: Int
    offset: Int
  ): [EntryPoint]
  numUids: Int
}

input AddMessageInput {
  identifier: String
  name: String!
  alternateName: String
  description: String
  isPartOf: [ConversationRef]
  sender: UserRef!

  """
  【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent.
  """
  dateSent: DateTime
  toRecipient: UserRef

  """
  【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has
  been read by the recipient if a single recipient exists.
  """
  dateRead: DateTime

  """
  【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists.
  """
  dateReceived: DateTime
  recipient: [UserRef]
  comments: [CommentRef]
}

type AddMessagePayload {
  message(
    filter: MessageFilter
    order: MessageOrder
    first: Int
    offset: Int
  ): [Message]
  numUids: Int
}

input AddOfferInput {
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
  The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  """
  price: Int
}

type AddOfferPayload {
  offer(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]
  numUids: Int
}

input AddOrganizationInput {
  identifier: String
  name: String!
  alternateName: String
  description: String
  owns: [OwnershipRef]
  parentOrganization: [OrganizationRef]
  subOrganizations: [OrganizationRef]
  departments: [OrganizationRef]
}

type AddOrganizationPayload {
  organization(
    filter: OrganizationFilter
    order: OrganizationOrder
    first: Int
    offset: Int
  ): [Organization]
  numUids: Int
}

input AddOwnershipInput {
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
  【所有权开始时间】 获得产品所有权的日期和时间 The date and time of obtaining the product.
  """
  ownedFrom: DateTime

  """
  【所有权结束时间】 放弃产品所有权的日期和时间 The date and time of giving up ownership on the product.
  """
  ownedThrough: DateTime
  owned: ThingRef
}

type AddOwnershipPayload {
  ownership(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  numUids: Int
}

input AddPersonInput {
  identifier: String
  name: String!
  alternateName: String
  description: String
  owns: [OwnershipRef]

  """
      个人身份证ID
  """
  personalID: String!

  """
  【姓】 姓。 在美国，是一个人姓名中的最后一个字。 Family name. In the U.S., the last name of an
  Person. This can be used along with givenName instead of the name property.
  """
  familyName: String

  """
  【名】 名。在美国，是一个人名字中的第一个字 Given name. In the U.S., the first name of a Person.
  This can be used along with familyName instead of the name property.
  """
  givenName: String
  hasUser: UserRef
}

type AddPersonPayload {
  person(
    filter: PersonFilter
    order: PersonOrder
    first: Int
    offset: Int
  ): [Person]
  numUids: Int
}

input AddProductInput {
  identifier: String
  name: String!
  alternateName: String
  description: String
  isShoppingable: Boolean
  itemOffers: [OfferRef]
  hasModels: [ProductModelRef]
}

input AddProductModelInput {
  identifier: String
  name: String!
  alternateName: String
  description: String
  isShoppingable: Boolean
  itemOffers: [OfferRef]
  isModelOf: ProductRef
}

type AddProductModelPayload {
  productmodel(
    filter: ProductModelFilter
    order: ProductModelOrder
    first: Int
    offset: Int
  ): [ProductModel]
  numUids: Int
}

type AddProductPayload {
  product(
    filter: ProductFilter
    order: ProductOrder
    first: Int
    offset: Int
  ): [Product]
  numUids: Int
}

input AddSoftwareApplicationInput {
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
  applicationSuite	Text 	The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
  """
  applicationSuite: String

  """
  availableOnDevice	Text 	Device required to run the application. Used in cases
  where a specific make/model is required to run the application. Supersedes
  device.    countriesNotSupported	Text 	Countries for which the application is
  not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
  code.    countriesSupported	Text 	Countries for which the application is
  supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
  code.    downloadUrl	URL 	If the file can be downloaded, URL to download the binary.
  """
  downloadUrl: String

  """
  featureList	Text  or URL 	Features or modules provided by this application (and possibly required by other applications).
  """
  featureList: String

  """
  fileSize	Text 	Size of the application / package (e.g. 18MB). In the absence
  of a unit (MB, KB etc.), KB will be assumed.    installUrl	URL 	URL at which
  the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """
  memoryRequirements	Text  or URL 	Minimum memory requirements.
  operatingSystem	Text 	Operating systems supported (Windows 7, OSX 10.6,
  Android 1.6).    permissions	Text 	Permission(s) required to run the app (for
  example, a mobile app may require full internet access or may run only on
  wifi).    processorRequirements	Text 	Processor architecture required to run
  the application (e.g. IA64).    releaseNotes	Text  or URL 	Description of what
  changed in this version.
  """
  releaseNotes: String

  """
  screenshot	ImageObject  or URL 	A link to a screenshot image of the app.
  """
  screenshot: String

  """
  softwareAddOn	SoftwareApplication 	Additional content for a software
  application.    softwareHelp	CreativeWork 	Software application help.
  softwareRequirements	Text  or URL 	Component dependency requirements for
  application. This includes runtime environments and shared libraries that are
  not included in the application distribution package, but required to run the
  application (Examples: DirectX, Java or .NET runtime). Supersedes
  requirements.    softwareVersion	Text 	Version of the software instance.
  storageRequirements	Text  or URL 	Storage requirements (free space required).
    supportingData	DataFeed 	Supporting data for a SoftwareApplication.
  """
  softwareVersion: String
}

type AddSoftwareApplicationPayload {
  softwareapplication(
    filter: SoftwareApplicationFilter
    order: SoftwareApplicationOrder
    first: Int
    offset: Int
  ): [SoftwareApplication]
  numUids: Int
}

input AddStoreInput {
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
  【创建日期】
  """
  dateCreated: DateTime

  """
  【更新日期】
  """
  dateModified: DateTime
  creator: UserRef
}

type AddStorePayload {
  store(
    filter: StoreFilter
    order: StoreOrder
    first: Int
    offset: Int
  ): [Store]
  numUids: Int
}

input AddUserInput {
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      The username used to login.    We also want to make sure that usernames are
  unique. The @id directive takes care of that - it also automatically adds hash
  searching, so we can drop the @search(by: [hash]), though having it also
  causes no harm.
  """
  username: String!

  """
      The password used to login.
  """
  password: String!

  """
      The user's public profile bio.
  """
  bio: String
  isUserOf: PersonRef!
}

type AddUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input AddWebhookInput {
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
  url
  """
  payloadUrl: String

  """
  如application/json
  """
  contentType: String

  """
  使用payloadUrl的安全token
  """
  secret: String
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated	DateTime or Date or DataFeedItem
  or CreativeWork
  """
  dateCreated: DateTime
  client: SoftwareApplicationRef
}

type AddWebhookPayload {
  webhook(
    filter: WebhookFilter
    order: WebhookOrder
    first: Int
    offset: Int
  ): [Webhook]
  numUids: Int
}

"""
CommentCanonical URL: http://cnschema.org/CommentThing > CreativeWork >
Comment【评论】对项目的评论 - 例如对博客文章的评论。
该评论的内容是通过text属性表示的，其主题通过about，与所有CreativeWorks共享的属性来表达 A comment on an item -
for example, a comment on a blog post. The comment's content is expressed via
the text property, and its topic via about, properties shared with all CreativeWorks.
"""
type Comment implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  【上级条目】 一个问题、答案或条目的父条目 The parent of a question, answer or item in general.
  """
  parentItem(filter: ThingFilter): Thing

  """
  【作者】 此内容或评分的作者。
  """
  author(filter: UserFilter): User

  """
  【创建日期】 创作出CreativeWork的日期。
  """
  dateCreated: DateTime
}

input CommentFilter {
  name: StringHashFilter
  id: [ID!]
  and: CommentFilter
  or: CommentFilter
  not: CommentFilter
}

input CommentOrder {
  asc: CommentOrderable
  desc: CommentOrderable
  then: CommentOrder
}

enum CommentOrderable {
  identifier
  name
  alternateName
  description
  dateCreated
}

input CommentPatch {
  identifier: String
  name: String
  alternateName: String
  description: String
  parentItem: ThingRef
  author: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。
  """
  dateCreated: DateTime
}

input CommentRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String
  parentItem: ThingRef
  author: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。
  """
  dateCreated: DateTime
}

"""
【对话】组织之间或特定主题的人员之间的一个或多个消息。 可以使用isPartOf或hasPart属性将个人消息链接到会话。 One or more
messages between organizations or people on a particular topic. Individual
messages can be linked to the conversation with isPartOf or hasPart properties.
"""
type Conversation implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  【关于】 事物的关于信息 The subject matter of the content.
  """
  about(filter: ThingFilter): Thing

  """
  【负责人】 对CreativeWork负有法律责任的特定的人。 Specifies the Person that is legally accountable for the CreativeWork.
  """
  accountablePerson(filter: UserFilter): User

  """
  【作者】 该 CreativeWork 的创作者/作者。跟CreativeWork的Author属性一样。 The creator/author of
  this CreativeWork. This is the same as the Author property for
  CreativeWork.creator    Organization or Person or CreativeWork or UserComments
  """
  creator(filter: UserFilter): User

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime

  """
  【所在数据集目录】所在的数据集目录 A data catalog which contains this dataset.
  """
  includedInDataCatalog(filter: DataCatalogFilter): DataCatalog

  """
  参照 hasPart【作品组件】 表示某个作品是该作品的一部分
  """
  hasParts(
    filter: MessageFilter
    order: MessageOrder
    first: Int
    offset: Int
  ): [Message]

  """
  本会话Conversation给第三方软件如Github、阿里云代码创建的webhook，第三方软件向本会话推送事件消息
  """
  webhook(
    filter: WebhookFilter
    order: WebhookOrder
    first: Int
    offset: Int
  ): [Webhook]
}

input ConversationFilter {
  name: StringHashFilter
  id: [ID!]
  and: ConversationFilter
  or: ConversationFilter
  not: ConversationFilter
}

input ConversationOrder {
  asc: ConversationOrderable
  desc: ConversationOrderable
  then: ConversationOrder
}

enum ConversationOrderable {
  identifier
  name
  alternateName
  description
  dateCreated
}

input ConversationPatch {
  identifier: String
  name: String
  alternateName: String
  description: String
  about: ThingRef
  accountablePerson: UserRef
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  includedInDataCatalog: DataCatalogRef
  hasParts: [MessageRef]
  webhook: [WebhookRef]
}

input ConversationRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String
  about: ThingRef
  accountablePerson: UserRef
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  includedInDataCatalog: DataCatalogRef
  hasParts: [MessageRef]
  webhook: [WebhookRef]
}

"""
Canonical URL: http://cnschema.org/DataCatalog【数据目录】数据集的目录 A collection of datasets.
"""
type DataCatalog implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  【所在父数据集目录】所在的父数据集目录 A data catalog which contains this dataset.
  """
  parentDataCatalog(filter: DataCatalogFilter): DataCatalog

  """
  【包含子数据集目录】包含子的数据集目录
  """
  subDataCatalogs(
    filter: DataCatalogFilter
    order: DataCatalogOrder
    first: Int
    offset: Int
  ): [DataCatalog]

  """
  【作者】 该 CreativeWork 的创作者/作者。跟CreativeWork的Author属性一样。 The creator/author of
  this CreativeWork. This is the same as the Author property for
  CreativeWork.creator    Organization or Person or CreativeWork or UserComments
  """
  creator(filter: UserFilter): User

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

input DataCatalogFilter {
  name: StringHashFilter
  id: [ID!]
  and: DataCatalogFilter
  or: DataCatalogFilter
  not: DataCatalogFilter
}

input DataCatalogOrder {
  asc: DataCatalogOrderable
  desc: DataCatalogOrderable
  then: DataCatalogOrder
}

enum DataCatalogOrderable {
  identifier
  name
  alternateName
  description
  dateCreated
}

input DataCatalogPatch {
  identifier: String
  name: String
  alternateName: String
  description: String
  parentDataCatalog: DataCatalogRef
  subDataCatalogs: [DataCatalogRef]
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

input DataCatalogRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String
  parentDataCatalog: DataCatalogRef
  subDataCatalogs: [DataCatalogRef]
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

scalar DateTime

input DateTimeFilter {
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
}

type DeleteCommentPayload {
  msg: String
  numUids: Int
}

type DeleteConversationPayload {
  msg: String
  numUids: Int
}

type DeleteDataCatalogPayload {
  msg: String
  numUids: Int
}

type DeleteEntryPointPayload {
  msg: String
  numUids: Int
}

type DeleteMessagePayload {
  msg: String
  numUids: Int
}

type DeleteOfferPayload {
  msg: String
  numUids: Int
}

type DeleteOrganizationPayload {
  msg: String
  numUids: Int
}

type DeleteOwnershipPayload {
  msg: String
  numUids: Int
}

type DeletePersonPayload {
  msg: String
  numUids: Int
}

type DeleteProductModelPayload {
  msg: String
  numUids: Int
}

type DeleteProductPayload {
  msg: String
  numUids: Int
}

type DeleteSoftwareApplicationPayload {
  msg: String
  numUids: Int
}

type DeleteStorePayload {
  msg: String
  numUids: Int
}

type DeleteThingPayload {
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  msg: String
  numUids: Int
}

type DeleteWebhookPayload {
  msg: String
  numUids: Int
}

enum DgraphIndex {
  int
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
}

"""
http://cnschema.org/EntryPoint 入口】一个入口，包含一些基于web的协议 An entry point, within some Web-based protocol.
"""
type EntryPoint implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  【链接模版】 一个URL的模版，可以利用变化参数形成完整的URL。 An url template (RFC6570) that will be used
  to construct the target of the execution of the action.
  """
  urlTemplate: String
}

input EntryPointFilter {
  name: StringHashFilter
  id: [ID!]
  and: EntryPointFilter
  or: EntryPointFilter
  not: EntryPointFilter
}

input EntryPointOrder {
  asc: EntryPointOrderable
  desc: EntryPointOrderable
  then: EntryPointOrder
}

enum EntryPointOrderable {
  identifier
  name
  alternateName
  description
  urlTemplate
}

input EntryPointPatch {
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  【链接模版】 一个URL的模版，可以利用变化参数形成完整的URL。 An url template (RFC6570) that will be used
  to construct the target of the execution of the action.
  """
  urlTemplate: String
}

input EntryPointRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  【链接模版】 一个URL的模版，可以利用变化参数形成完整的URL。 An url template (RFC6570) that will be used
  to construct the target of the execution of the action.
  """
  urlTemplate: String
}

input FloatFilter {
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
}

input IntFilter {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
}

"""
【消息】由发送者发给一个或多个组织或个人的信息 A single message from a sender to one or more organizations or people.
"""
type Message implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  isPartOf【从属于】 是它的一部分 Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
  """
  isPartOf(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]

  """
  【发送者】 参与者的子属性。例如邮件的发送者。 A sub property of participant. The participant who is at the sending end of the action.
  """
  sender(filter: UserFilter): User!

  """
  【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent.
  """
  dateSent: DateTime

  """
  【收件人】 消息的直接收件人 A sub property of recipient. The recipient who was directly sent the message.
  """
  toRecipient(filter: UserFilter): User

  """
  【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has
  been read by the recipient if a single recipient exists.
  """
  dateRead: DateTime

  """
  【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists.
  """
  dateReceived: DateTime

  """
  【接收者】 参与者的子属性。 在行动接收端的参与者。 A sub property of participant. The participant who is at the receiving end of the action.
  """
  recipient(
    filter: UserFilter
    order: UserOrder
    first: Int
    offset: Int
  ): [User]

  """
  【评论】 评论，一般是用户对CreativeWork的评论。 Comments, typically from users.
  """
  comments(
    filter: CommentFilter
    order: CommentOrder
    first: Int
    offset: Int
  ): [Comment]
}

input MessageFilter {
  name: StringHashFilter
  id: [ID!]
  and: MessageFilter
  or: MessageFilter
  not: MessageFilter
}

input MessageOrder {
  asc: MessageOrderable
  desc: MessageOrderable
  then: MessageOrder
}

enum MessageOrderable {
  identifier
  name
  alternateName
  description
  dateSent
  dateRead
  dateReceived
}

input MessagePatch {
  identifier: String
  name: String
  alternateName: String
  description: String
  isPartOf: [ConversationRef]
  sender: UserRef

  """
  【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent.
  """
  dateSent: DateTime
  toRecipient: UserRef

  """
  【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has
  been read by the recipient if a single recipient exists.
  """
  dateRead: DateTime

  """
  【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists.
  """
  dateReceived: DateTime
  recipient: [UserRef]
  comments: [CommentRef]
}

input MessageRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String
  isPartOf: [ConversationRef]
  sender: UserRef

  """
  【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent.
  """
  dateSent: DateTime
  toRecipient: UserRef

  """
  【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has
  been read by the recipient if a single recipient exists.
  """
  dateRead: DateTime

  """
  【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists.
  """
  dateReceived: DateTime
  recipient: [UserRef]
  comments: [CommentRef]
}

type Mutation {
  updateThing(input: UpdateThingInput!): UpdateThingPayload
  deleteThing(filter: ThingFilter!): DeleteThingPayload
  addProduct(input: [AddProductInput!]!): AddProductPayload
  updateProduct(input: UpdateProductInput!): UpdateProductPayload
  deleteProduct(filter: ProductFilter!): DeleteProductPayload
  addProductModel(input: [AddProductModelInput!]!): AddProductModelPayload
  updateProductModel(input: UpdateProductModelInput!): UpdateProductModelPayload
  deleteProductModel(filter: ProductModelFilter!): DeleteProductModelPayload
  addOffer(input: [AddOfferInput!]!): AddOfferPayload
  updateOffer(input: UpdateOfferInput!): UpdateOfferPayload
  deleteOffer(filter: OfferFilter!): DeleteOfferPayload
  addStore(input: [AddStoreInput!]!): AddStorePayload
  updateStore(input: UpdateStoreInput!): UpdateStorePayload
  deleteStore(filter: StoreFilter!): DeleteStorePayload
  addUser(input: [AddUserInput!]!): AddUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(filter: UserFilter!): DeleteUserPayload
  addPerson(input: [AddPersonInput!]!): AddPersonPayload
  updatePerson(input: UpdatePersonInput!): UpdatePersonPayload
  deletePerson(filter: PersonFilter!): DeletePersonPayload
  addOrganization(input: [AddOrganizationInput!]!): AddOrganizationPayload
  updateOrganization(input: UpdateOrganizationInput!): UpdateOrganizationPayload
  deleteOrganization(filter: OrganizationFilter!): DeleteOrganizationPayload
  addOwnership(input: [AddOwnershipInput!]!): AddOwnershipPayload
  updateOwnership(input: UpdateOwnershipInput!): UpdateOwnershipPayload
  deleteOwnership(filter: OwnershipFilter!): DeleteOwnershipPayload
  addDataCatalog(input: [AddDataCatalogInput!]!): AddDataCatalogPayload
  updateDataCatalog(input: UpdateDataCatalogInput!): UpdateDataCatalogPayload
  deleteDataCatalog(filter: DataCatalogFilter!): DeleteDataCatalogPayload
  addConversation(input: [AddConversationInput!]!): AddConversationPayload
  updateConversation(input: UpdateConversationInput!): UpdateConversationPayload
  deleteConversation(filter: ConversationFilter!): DeleteConversationPayload
  addMessage(input: [AddMessageInput!]!): AddMessagePayload
  updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
  deleteMessage(filter: MessageFilter!): DeleteMessagePayload
  addComment(input: [AddCommentInput!]!): AddCommentPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  deleteComment(filter: CommentFilter!): DeleteCommentPayload
  addEntryPoint(input: [AddEntryPointInput!]!): AddEntryPointPayload
  updateEntryPoint(input: UpdateEntryPointInput!): UpdateEntryPointPayload
  deleteEntryPoint(filter: EntryPointFilter!): DeleteEntryPointPayload
  addSoftwareApplication(
    input: [AddSoftwareApplicationInput!]!
  ): AddSoftwareApplicationPayload
  updateSoftwareApplication(
    input: UpdateSoftwareApplicationInput!
  ): UpdateSoftwareApplicationPayload
  deleteSoftwareApplication(
    filter: SoftwareApplicationFilter!
  ): DeleteSoftwareApplicationPayload
  addWebhook(input: [AddWebhookInput!]!): AddWebhookPayload
  updateWebhook(input: UpdateWebhookInput!): UpdateWebhookPayload
  deleteWebhook(filter: WebhookFilter!): DeleteWebhookPayload
}

type Offer implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  itemOffered    AggregateOffer  or CreativeWork  or Event  or MenuItem  or
  Product  or Service  or Trip    An item being offered (or demanded). The
  transactional nature of the offer or demand is documented using
  businessFunction, e.g. sell, lease etc. While several common expected types
  are listed explicitly in this definition, others can be used. Using a second
  type, such as Product or a subtype of Product, can clarify the nature of the
  offer. Inverse property: offers.
  """
  itemOffered: Shoppingable

  """
  offeredBy    Organization  or Person    A pointer to the organization or
  person making the offer. Inverse property: makesOffer.
  """
  offeredBy: Party

  """
  The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  """
  price: Int
}

input OfferFilter {
  name: StringHashFilter
  id: [ID!]
  and: OfferFilter
  or: OfferFilter
  not: OfferFilter
}

input OfferOrder {
  asc: OfferOrderable
  desc: OfferOrderable
  then: OfferOrder
}

enum OfferOrderable {
  identifier
  name
  alternateName
  description
  price
}

input OfferPatch {
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  """
  price: Int
}

input OfferRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  """
  price: Int
}

"""
组织
"""
type Organization implements Party & Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!
  owns(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]

  """
  【上级组织】 subOrganization的反向属性，即包含这个组织的更大组织
  """
  parentOrganization(
    filter: OrganizationFilter
    order: OrganizationOrder
    first: Int
    offset: Int
  ): [Organization]

  """
  【子机构】 两个组织之间的关系。其中第二个组织，例如以子公司的名字，属于第一个组织。
  """
  subOrganizations(
    filter: OrganizationFilter
    order: OrganizationOrder
    first: Int
    offset: Int
  ): [Organization]

  """
  【部门】 组织与该组织某个部门之间的关系，也被描述成组织（允许不同的网址，标识，开放时间）。 例如：一家有药店的商店，或者是一间带咖啡厅的面包店。 A
  relationship between an organization and a department of that organization,
  also described as an organization (allowing different urls, logos, opening
  hours). For example: a store with a pharmacy, or a bakery with a cafe.
  """
  departments(
    filter: OrganizationFilter
    order: OrganizationOrder
    first: Int
    offset: Int
  ): [Organization]
}

input OrganizationFilter {
  name: StringHashFilter
  id: [ID!]
  and: OrganizationFilter
  or: OrganizationFilter
  not: OrganizationFilter
}

input OrganizationOrder {
  asc: OrganizationOrderable
  desc: OrganizationOrderable
  then: OrganizationOrder
}

enum OrganizationOrderable {
  identifier
  name
  alternateName
  description
}

input OrganizationPatch {
  identifier: String
  name: String
  alternateName: String
  description: String
  owns: [OwnershipRef]
  parentOrganization: [OrganizationRef]
  subOrganizations: [OrganizationRef]
  departments: [OrganizationRef]
}

input OrganizationRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String
  owns: [OwnershipRef]
  parentOrganization: [OrganizationRef]
  subOrganizations: [OrganizationRef]
  departments: [OrganizationRef]
}

"""
描述产品的所有者或所属机构的信息
"""
type Ownership implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  【获取来源】 产品获取的机构来源 The organization or person from which the product was acquired.
  """
  acquiredFrom: Party

  """
  【所有权开始时间】 获得产品所有权的日期和时间 The date and time of obtaining the product.
  """
  ownedFrom: DateTime

  """
  【所有权结束时间】 放弃产品所有权的日期和时间 The date and time of giving up ownership on the product.
  """
  ownedThrough: DateTime

  """
  【东西类型】 拥有的东西Thing。
  """
  owned(filter: ThingFilter): Thing

  """
  【个人或组织】拥有者
  """
  owner: Party
}

input OwnershipFilter {
  name: StringHashFilter
  id: [ID!]
  and: OwnershipFilter
  or: OwnershipFilter
  not: OwnershipFilter
}

input OwnershipOrder {
  asc: OwnershipOrderable
  desc: OwnershipOrderable
  then: OwnershipOrder
}

enum OwnershipOrderable {
  identifier
  name
  alternateName
  description
  ownedFrom
  ownedThrough
}

input OwnershipPatch {
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  【所有权开始时间】 获得产品所有权的日期和时间 The date and time of obtaining the product.
  """
  ownedFrom: DateTime

  """
  【所有权结束时间】 放弃产品所有权的日期和时间 The date and time of giving up ownership on the product.
  """
  ownedThrough: DateTime
  owned: ThingRef
}

input OwnershipRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  【所有权开始时间】 获得产品所有权的日期和时间 The date and time of obtaining the product.
  """
  ownedFrom: DateTime

  """
  【所有权结束时间】 放弃产品所有权的日期和时间 The date and time of giving up ownership on the product.
  """
  ownedThrough: DateTime
  owned: ThingRef
}

"""
Party 代表有行动能力的人或组织
"""
interface Party {
  """
  【拥有】 组织或个人拥有的产品 逆属性 Ownable.ownedBy，Products owned by the organization or person.
  """
  owns(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
}

"""
个人,可能在平台里有一个且唯一的用户账号User
"""
type Person implements Party & Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!
  owns(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]

  """
      个人身份证ID
  """
  personalID: String!

  """
  【姓】 姓。 在美国，是一个人姓名中的最后一个字。 Family name. In the U.S., the last name of an
  Person. This can be used along with givenName instead of the name property.
  """
  familyName: String

  """
  【名】 名。在美国，是一个人名字中的第一个字 Given name. In the U.S., the first name of a Person.
  This can be used along with familyName instead of the name property.
  """
  givenName: String

  """
  本人所拥有的用户账号，逆属性User.isUserOf，参考Inverse property: isPartOf
  """
  hasUser(filter: UserFilter): User
}

input PersonFilter {
  name: StringHashFilter
  id: [ID!]
  and: PersonFilter
  or: PersonFilter
  not: PersonFilter
}

input PersonOrder {
  asc: PersonOrderable
  desc: PersonOrderable
  then: PersonOrder
}

enum PersonOrderable {
  identifier
  name
  alternateName
  description
  personalID
  familyName
  givenName
}

input PersonPatch {
  identifier: String
  name: String
  alternateName: String
  description: String
  owns: [OwnershipRef]

  """
      个人身份证ID
  """
  personalID: String

  """
  【姓】 姓。 在美国，是一个人姓名中的最后一个字。 Family name. In the U.S., the last name of an
  Person. This can be used along with givenName instead of the name property.
  """
  familyName: String

  """
  【名】 名。在美国，是一个人名字中的第一个字 Given name. In the U.S., the first name of a Person.
  This can be used along with familyName instead of the name property.
  """
  givenName: String
  hasUser: UserRef
}

input PersonRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String
  owns: [OwnershipRef]

  """
      个人身份证ID
  """
  personalID: String

  """
  【姓】 姓。 在美国，是一个人姓名中的最后一个字。 Family name. In the U.S., the last name of an
  Person. This can be used along with givenName instead of the name property.
  """
  familyName: String

  """
  【名】 名。在美国，是一个人名字中的第一个字 Given name. In the U.S., the first name of a Person.
  This can be used along with familyName instead of the name property.
  """
  givenName: String
  hasUser: UserRef
}

type Product implements Shoppingable & Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!
  isShoppingable: Boolean
  itemOffers(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]

  """
  【型号】 产品的型号。
  """
  hasModels(
    filter: ProductModelFilter
    order: ProductModelOrder
    first: Int
    offset: Int
  ): [ProductModel]
}

input ProductFilter {
  name: StringHashFilter
  id: [ID!]
  and: ProductFilter
  or: ProductFilter
  not: ProductFilter
}

type ProductModel implements Shoppingable & Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!
  isShoppingable: Boolean
  itemOffers(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]

  """
  【产品】 所属产品。
  """
  isModelOf(filter: ProductFilter): Product
}

input ProductModelFilter {
  name: StringHashFilter
  id: [ID!]
  and: ProductModelFilter
  or: ProductModelFilter
  not: ProductModelFilter
}

input ProductModelOrder {
  asc: ProductModelOrderable
  desc: ProductModelOrderable
  then: ProductModelOrder
}

enum ProductModelOrderable {
  identifier
  name
  alternateName
  description
}

input ProductModelPatch {
  identifier: String
  name: String
  alternateName: String
  description: String
  isShoppingable: Boolean
  itemOffers: [OfferRef]
  isModelOf: ProductRef
}

input ProductModelRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String
  isShoppingable: Boolean
  itemOffers: [OfferRef]
  isModelOf: ProductRef
}

input ProductOrder {
  asc: ProductOrderable
  desc: ProductOrderable
  then: ProductOrder
}

enum ProductOrderable {
  identifier
  name
  alternateName
  description
}

input ProductPatch {
  identifier: String
  name: String
  alternateName: String
  description: String
  isShoppingable: Boolean
  itemOffers: [OfferRef]
  hasModels: [ProductModelRef]
}

input ProductRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String
  isShoppingable: Boolean
  itemOffers: [OfferRef]
  hasModels: [ProductModelRef]
}

type Query {
  getThing(id: ID!): Thing
  queryThing(
    filter: ThingFilter
    order: ThingOrder
    first: Int
    offset: Int
  ): [Thing]
  queryShoppingable(first: Int, offset: Int): [Shoppingable]
  queryParty(first: Int, offset: Int): [Party]
  getProduct(id: ID!): Product
  queryProduct(
    filter: ProductFilter
    order: ProductOrder
    first: Int
    offset: Int
  ): [Product]
  getProductModel(id: ID!): ProductModel
  queryProductModel(
    filter: ProductModelFilter
    order: ProductModelOrder
    first: Int
    offset: Int
  ): [ProductModel]
  getOffer(id: ID!): Offer
  queryOffer(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]
  getStore(id: ID!): Store
  queryStore(
    filter: StoreFilter
    order: StoreOrder
    first: Int
    offset: Int
  ): [Store]
  getUser(id: ID, username: String): User
  queryUser(
    filter: UserFilter
    order: UserOrder
    first: Int
    offset: Int
  ): [User]
  getPerson(id: ID!): Person
  queryPerson(
    filter: PersonFilter
    order: PersonOrder
    first: Int
    offset: Int
  ): [Person]
  getOrganization(id: ID!): Organization
  queryOrganization(
    filter: OrganizationFilter
    order: OrganizationOrder
    first: Int
    offset: Int
  ): [Organization]
  getOwnership(id: ID!): Ownership
  queryOwnership(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  getDataCatalog(id: ID!): DataCatalog
  queryDataCatalog(
    filter: DataCatalogFilter
    order: DataCatalogOrder
    first: Int
    offset: Int
  ): [DataCatalog]
  getConversation(id: ID!): Conversation
  queryConversation(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]
  getMessage(id: ID!): Message
  queryMessage(
    filter: MessageFilter
    order: MessageOrder
    first: Int
    offset: Int
  ): [Message]
  getComment(id: ID!): Comment
  queryComment(
    filter: CommentFilter
    order: CommentOrder
    first: Int
    offset: Int
  ): [Comment]
  getEntryPoint(id: ID!): EntryPoint
  queryEntryPoint(
    filter: EntryPointFilter
    order: EntryPointOrder
    first: Int
    offset: Int
  ): [EntryPoint]
  getSoftwareApplication(id: ID!): SoftwareApplication
  querySoftwareApplication(
    filter: SoftwareApplicationFilter
    order: SoftwareApplicationOrder
    first: Int
    offset: Int
  ): [SoftwareApplication]
  getWebhook(id: ID!): Webhook
  queryWebhook(
    filter: WebhookFilter
    order: WebhookOrder
    first: Int
    offset: Int
  ): [Webhook]
}

"""
可购物：可以购买订购的产品或服务Product，Service
"""
interface Shoppingable {
  """
  可以购买订购的产品或服务Product，Service
  """
  isShoppingable: Boolean

  """
  【商品供应】 供应的商品。
  """
  itemOffers(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]
}

"""
https://schema.org/SoftwareApplication A software application.
"""
type SoftwareApplication implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  applicationSuite	Text 	The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
  """
  applicationSuite: String

  """
  availableOnDevice	Text 	Device required to run the application. Used in cases
  where a specific make/model is required to run the application. Supersedes
  device.    countriesNotSupported	Text 	Countries for which the application is
  not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
  code.    countriesSupported	Text 	Countries for which the application is
  supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
  code.    downloadUrl	URL 	If the file can be downloaded, URL to download the binary.
  """
  downloadUrl: String

  """
  featureList	Text  or URL 	Features or modules provided by this application (and possibly required by other applications).
  """
  featureList: String

  """
  fileSize	Text 	Size of the application / package (e.g. 18MB). In the absence
  of a unit (MB, KB etc.), KB will be assumed.    installUrl	URL 	URL at which
  the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """
  memoryRequirements	Text  or URL 	Minimum memory requirements.
  operatingSystem	Text 	Operating systems supported (Windows 7, OSX 10.6,
  Android 1.6).    permissions	Text 	Permission(s) required to run the app (for
  example, a mobile app may require full internet access or may run only on
  wifi).    processorRequirements	Text 	Processor architecture required to run
  the application (e.g. IA64).    releaseNotes	Text  or URL 	Description of what
  changed in this version.
  """
  releaseNotes: String

  """
  screenshot	ImageObject  or URL 	A link to a screenshot image of the app.
  """
  screenshot: String

  """
  softwareAddOn	SoftwareApplication 	Additional content for a software
  application.    softwareHelp	CreativeWork 	Software application help.
  softwareRequirements	Text  or URL 	Component dependency requirements for
  application. This includes runtime environments and shared libraries that are
  not included in the application distribution package, but required to run the
  application (Examples: DirectX, Java or .NET runtime). Supersedes
  requirements.    softwareVersion	Text 	Version of the software instance.
  storageRequirements	Text  or URL 	Storage requirements (free space required).
    supportingData	DataFeed 	Supporting data for a SoftwareApplication.
  """
  softwareVersion: String
}

input SoftwareApplicationFilter {
  name: StringHashFilter
  id: [ID!]
  and: SoftwareApplicationFilter
  or: SoftwareApplicationFilter
  not: SoftwareApplicationFilter
}

input SoftwareApplicationOrder {
  asc: SoftwareApplicationOrderable
  desc: SoftwareApplicationOrderable
  then: SoftwareApplicationOrder
}

enum SoftwareApplicationOrderable {
  identifier
  name
  alternateName
  description
  applicationSuite
  downloadUrl
  featureList
  installUrl
  releaseNotes
  screenshot
  softwareVersion
}

input SoftwareApplicationPatch {
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  applicationSuite	Text 	The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
  """
  applicationSuite: String

  """
  availableOnDevice	Text 	Device required to run the application. Used in cases
  where a specific make/model is required to run the application. Supersedes
  device.    countriesNotSupported	Text 	Countries for which the application is
  not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
  code.    countriesSupported	Text 	Countries for which the application is
  supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
  code.    downloadUrl	URL 	If the file can be downloaded, URL to download the binary.
  """
  downloadUrl: String

  """
  featureList	Text  or URL 	Features or modules provided by this application (and possibly required by other applications).
  """
  featureList: String

  """
  fileSize	Text 	Size of the application / package (e.g. 18MB). In the absence
  of a unit (MB, KB etc.), KB will be assumed.    installUrl	URL 	URL at which
  the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """
  memoryRequirements	Text  or URL 	Minimum memory requirements.
  operatingSystem	Text 	Operating systems supported (Windows 7, OSX 10.6,
  Android 1.6).    permissions	Text 	Permission(s) required to run the app (for
  example, a mobile app may require full internet access or may run only on
  wifi).    processorRequirements	Text 	Processor architecture required to run
  the application (e.g. IA64).    releaseNotes	Text  or URL 	Description of what
  changed in this version.
  """
  releaseNotes: String

  """
  screenshot	ImageObject  or URL 	A link to a screenshot image of the app.
  """
  screenshot: String

  """
  softwareAddOn	SoftwareApplication 	Additional content for a software
  application.    softwareHelp	CreativeWork 	Software application help.
  softwareRequirements	Text  or URL 	Component dependency requirements for
  application. This includes runtime environments and shared libraries that are
  not included in the application distribution package, but required to run the
  application (Examples: DirectX, Java or .NET runtime). Supersedes
  requirements.    softwareVersion	Text 	Version of the software instance.
  storageRequirements	Text  or URL 	Storage requirements (free space required).
    supportingData	DataFeed 	Supporting data for a SoftwareApplication.
  """
  softwareVersion: String
}

input SoftwareApplicationRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  applicationSuite	Text 	The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
  """
  applicationSuite: String

  """
  availableOnDevice	Text 	Device required to run the application. Used in cases
  where a specific make/model is required to run the application. Supersedes
  device.    countriesNotSupported	Text 	Countries for which the application is
  not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
  code.    countriesSupported	Text 	Countries for which the application is
  supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
  code.    downloadUrl	URL 	If the file can be downloaded, URL to download the binary.
  """
  downloadUrl: String

  """
  featureList	Text  or URL 	Features or modules provided by this application (and possibly required by other applications).
  """
  featureList: String

  """
  fileSize	Text 	Size of the application / package (e.g. 18MB). In the absence
  of a unit (MB, KB etc.), KB will be assumed.    installUrl	URL 	URL at which
  the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """
  memoryRequirements	Text  or URL 	Minimum memory requirements.
  operatingSystem	Text 	Operating systems supported (Windows 7, OSX 10.6,
  Android 1.6).    permissions	Text 	Permission(s) required to run the app (for
  example, a mobile app may require full internet access or may run only on
  wifi).    processorRequirements	Text 	Processor architecture required to run
  the application (e.g. IA64).    releaseNotes	Text  or URL 	Description of what
  changed in this version.
  """
  releaseNotes: String

  """
  screenshot	ImageObject  or URL 	A link to a screenshot image of the app.
  """
  screenshot: String

  """
  softwareAddOn	SoftwareApplication 	Additional content for a software
  application.    softwareHelp	CreativeWork 	Software application help.
  softwareRequirements	Text  or URL 	Component dependency requirements for
  application. This includes runtime environments and shared libraries that are
  not included in the application distribution package, but required to run the
  application (Examples: DirectX, Java or .NET runtime). Supersedes
  requirements.    softwareVersion	Text 	Version of the software instance.
  storageRequirements	Text  or URL 	Storage requirements (free space required).
    supportingData	DataFeed 	Supporting data for a SoftwareApplication.
  """
  softwareVersion: String
}

type Store implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  【创建日期】
  """
  dateCreated: DateTime

  """
  【更新日期】
  """
  dateModified: DateTime

  """
  【创建人】 该物体的创作者/作者。
  """
  creator(filter: UserFilter): User
}

input StoreFilter {
  name: StringHashFilter
  id: [ID!]
  and: StoreFilter
  or: StoreFilter
  not: StoreFilter
}

input StoreOrder {
  asc: StoreOrderable
  desc: StoreOrderable
  then: StoreOrder
}

enum StoreOrderable {
  identifier
  name
  alternateName
  description
  dateCreated
  dateModified
}

input StorePatch {
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  【创建日期】
  """
  dateCreated: DateTime

  """
  【更新日期】
  """
  dateModified: DateTime
  creator: UserRef
}

input StoreRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  【创建日期】
  """
  dateCreated: DateTime

  """
  【更新日期】
  """
  dateModified: DateTime
  creator: UserRef
}

input StringExactFilter {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

"""
A Thing with an ID，在KGIS平台内所有内容都是东西Thing
"""
interface Thing {
  """
  【标识符】 标识符 The identifier property represents any kind of identifier for any
  kind of Thing, such as ISBNs, GTIN codes, UUIDs etc.
  """
  identifier: String

  """
  name    Text    The name of the item.
  """
  name: String!

  """
  【别名】 该项的别名。 An alias for the item.
  """
  alternateName: String

  """
  【描述】 该项的一个简单描述。 A description of the item.
  """
  description: String

  """
      The id of the thing.    The id: ID! in Thing means that an auto-generated
  ID by Dgraph will be used to identify things.
  """
  id: ID!
}

input ThingFilter {
  name: StringHashFilter
  id: [ID!]
  and: ThingFilter
  or: ThingFilter
  not: ThingFilter
}

input ThingOrder {
  asc: ThingOrderable
  desc: ThingOrderable
  then: ThingOrder
}

enum ThingOrderable {
  identifier
  name
  alternateName
  description
}

input ThingPatch {
  """
  【标识符】 标识符 The identifier property represents any kind of identifier for any
  kind of Thing, such as ISBNs, GTIN codes, UUIDs etc.
  """
  identifier: String

  """
  name    Text    The name of the item.
  """
  name: String

  """
  【别名】 该项的别名。 An alias for the item.
  """
  alternateName: String

  """
  【描述】 该项的一个简单描述。 A description of the item.
  """
  description: String
}

input ThingRef {
  """
      The id of the thing.    The id: ID! in Thing means that an auto-generated
  ID by Dgraph will be used to identify things.
  """
  id: ID!
}

input UpdateCommentInput {
  filter: CommentFilter!
  set: CommentPatch
  remove: CommentPatch
}

type UpdateCommentPayload {
  comment(
    filter: CommentFilter
    order: CommentOrder
    first: Int
    offset: Int
  ): [Comment]
  numUids: Int
}

input UpdateConversationInput {
  filter: ConversationFilter!
  set: ConversationPatch
  remove: ConversationPatch
}

type UpdateConversationPayload {
  conversation(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]
  numUids: Int
}

input UpdateDataCatalogInput {
  filter: DataCatalogFilter!
  set: DataCatalogPatch
  remove: DataCatalogPatch
}

type UpdateDataCatalogPayload {
  datacatalog(
    filter: DataCatalogFilter
    order: DataCatalogOrder
    first: Int
    offset: Int
  ): [DataCatalog]
  numUids: Int
}

input UpdateEntryPointInput {
  filter: EntryPointFilter!
  set: EntryPointPatch
  remove: EntryPointPatch
}

type UpdateEntryPointPayload {
  entrypoint(
    filter: EntryPointFilter
    order: EntryPointOrder
    first: Int
    offset: Int
  ): [EntryPoint]
  numUids: Int
}

input UpdateMessageInput {
  filter: MessageFilter!
  set: MessagePatch
  remove: MessagePatch
}

type UpdateMessagePayload {
  message(
    filter: MessageFilter
    order: MessageOrder
    first: Int
    offset: Int
  ): [Message]
  numUids: Int
}

input UpdateOfferInput {
  filter: OfferFilter!
  set: OfferPatch
  remove: OfferPatch
}

type UpdateOfferPayload {
  offer(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]
  numUids: Int
}

input UpdateOrganizationInput {
  filter: OrganizationFilter!
  set: OrganizationPatch
  remove: OrganizationPatch
}

type UpdateOrganizationPayload {
  organization(
    filter: OrganizationFilter
    order: OrganizationOrder
    first: Int
    offset: Int
  ): [Organization]
  numUids: Int
}

input UpdateOwnershipInput {
  filter: OwnershipFilter!
  set: OwnershipPatch
  remove: OwnershipPatch
}

type UpdateOwnershipPayload {
  ownership(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  numUids: Int
}

input UpdatePersonInput {
  filter: PersonFilter!
  set: PersonPatch
  remove: PersonPatch
}

type UpdatePersonPayload {
  person(
    filter: PersonFilter
    order: PersonOrder
    first: Int
    offset: Int
  ): [Person]
  numUids: Int
}

input UpdateProductInput {
  filter: ProductFilter!
  set: ProductPatch
  remove: ProductPatch
}

input UpdateProductModelInput {
  filter: ProductModelFilter!
  set: ProductModelPatch
  remove: ProductModelPatch
}

type UpdateProductModelPayload {
  productmodel(
    filter: ProductModelFilter
    order: ProductModelOrder
    first: Int
    offset: Int
  ): [ProductModel]
  numUids: Int
}

type UpdateProductPayload {
  product(
    filter: ProductFilter
    order: ProductOrder
    first: Int
    offset: Int
  ): [Product]
  numUids: Int
}

input UpdateSoftwareApplicationInput {
  filter: SoftwareApplicationFilter!
  set: SoftwareApplicationPatch
  remove: SoftwareApplicationPatch
}

type UpdateSoftwareApplicationPayload {
  softwareapplication(
    filter: SoftwareApplicationFilter
    order: SoftwareApplicationOrder
    first: Int
    offset: Int
  ): [SoftwareApplication]
  numUids: Int
}

input UpdateStoreInput {
  filter: StoreFilter!
  set: StorePatch
  remove: StorePatch
}

type UpdateStorePayload {
  store(
    filter: StoreFilter
    order: StoreOrder
    first: Int
    offset: Int
  ): [Store]
  numUids: Int
}

input UpdateThingInput {
  filter: ThingFilter!
  set: ThingPatch
  remove: ThingPatch
}

type UpdateThingPayload {
  thing(
    filter: ThingFilter
    order: ThingOrder
    first: Int
    offset: Int
  ): [Thing]
  numUids: Int
}

input UpdateUserInput {
  filter: UserFilter!
  set: UserPatch
  remove: UserPatch
}

type UpdateUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input UpdateWebhookInput {
  filter: WebhookFilter!
  set: WebhookPatch
  remove: WebhookPatch
}

type UpdateWebhookPayload {
  webhook(
    filter: WebhookFilter
    order: WebhookOrder
    first: Int
    offset: Int
  ): [Webhook]
  numUids: Int
}

"""
用户账号
"""
type User implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      The username used to login.    We also want to make sure that usernames are
  unique. The @id directive takes care of that - it also automatically adds hash
  searching, so we can drop the @search(by: [hash]), though having it also
  causes no harm.
  """
  username: String!

  """
      The password used to login.
  """
  password: String!

  """
      The user's public profile bio.
  """
  bio: String

  """
  用户账号对应的人，有账号一定有相关的Person，逆属性 Person.hasUser，参考Inverse property: hasPart
  """
  isUserOf(filter: PersonFilter): Person!
}

input UserFilter {
  name: StringHashFilter
  id: [ID!]
  username: StringHashFilter
  and: UserFilter
  or: UserFilter
  not: UserFilter
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

enum UserOrderable {
  identifier
  name
  alternateName
  description
  username
  password
  bio
}

input UserPatch {
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      The password used to login.
  """
  password: String

  """
      The user's public profile bio.
  """
  bio: String
  isUserOf: PersonRef
}

input UserRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      The username used to login.    We also want to make sure that usernames are
  unique. The @id directive takes care of that - it also automatically adds hash
  searching, so we can drop the @search(by: [hash]), though having it also
  causes no harm.
  """
  username: String

  """
      The password used to login.
  """
  password: String

  """
      The user's public profile bio.
  """
  bio: String
  isUserOf: PersonRef
}

"""
网络钩子是“用户定义的HTTP回调”。[2]网络钩子通常被某些事件激活，比如将代码推送到源[3]或评论博客。[4]当此事件发生时，原网站将向为网络钩子配置的URL发送HTTP请求。用户可配置它们引发网页上的事件以调用另一个网站的行为。Webhooks allow external services to be notified when certain events happen.
"""
type Webhook implements Thing {
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  url
  """
  payloadUrl: String

  """
  如application/json
  """
  contentType: String

  """
  使用payloadUrl的安全token
  """
  secret: String

  """
  【作者】 该 CreativeWork 的创作者/作者。跟CreativeWork的Author属性一样。 The creator/author of
  this CreativeWork. This is the same as the Author property for
  CreativeWork.creator	Organization or Person or CreativeWork or UserComments
  """
  creator(filter: UserFilter): User

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated	DateTime or Date or DataFeedItem
  or CreativeWork
  """
  dateCreated: DateTime

  """
   调用此webhook的客户端
  """
  client(filter: SoftwareApplicationFilter): SoftwareApplication
}

input WebhookFilter {
  name: StringHashFilter
  id: [ID!]
  and: WebhookFilter
  or: WebhookFilter
  not: WebhookFilter
}

input WebhookOrder {
  asc: WebhookOrderable
  desc: WebhookOrderable
  then: WebhookOrder
}

enum WebhookOrderable {
  identifier
  name
  alternateName
  description
  payloadUrl
  contentType
  secret
  dateCreated
}

input WebhookPatch {
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  url
  """
  payloadUrl: String

  """
  如application/json
  """
  contentType: String

  """
  使用payloadUrl的安全token
  """
  secret: String
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated	DateTime or Date or DataFeedItem
  or CreativeWork
  """
  dateCreated: DateTime
  client: SoftwareApplicationRef
}

input WebhookRef {
  id: ID
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  url
  """
  payloadUrl: String

  """
  如application/json
  """
  contentType: String

  """
  使用payloadUrl的安全token
  """
  secret: String
  creator: UserRef

  """
  【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or
  the item was added to a DataFeed. dateCreated	DateTime or Date or DataFeedItem
  or CreativeWork
  """
  dateCreated: DateTime
  client: SoftwareApplicationRef
}
