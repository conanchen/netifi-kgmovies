directive @hasInverse(field: String!) on FIELD_DEFINITION

directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

directive @dgraph(
  type: String
  pred: String
) on OBJECT | INTERFACE | FIELD_DEFINITION

directive @id on FIELD_DEFINITION

input AddConversationInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  about: ThingRef
  accountablePerson: UserRef
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  includedInDataCatalog: DataCatalogRef
  hasMessages: [MessageRef]
  webhook: [WebhookRef]
}

type AddConversationPayload {
  conversation(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]
  numUids: Int
}

input AddDataCatalogInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  parentDataCatalog: DataCatalogRef
  subDataCatalogs: [DataCatalogRef]
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

type AddDataCatalogPayload {
  datacatalog(
    filter: DataCatalogFilter
    order: DataCatalogOrder
    first: Int
    offset: Int
  ): [DataCatalog]
  numUids: Int
}

input AddEmployeeRoleInput {
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      【员工编号】
  """
  number: String
}

type AddEmployeeRolePayload {
  employeerole(
    filter: EmployeeRoleFilter
    order: EmployeeRoleOrder
    first: Int
    offset: Int
  ): [EmployeeRole]
  numUids: Int
}

input AddEntryPointInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
  【链接模版】 一个URL的模版，可以利用变化参数形成完整的URL。 An url template (RFC6570) that will be used
  to construct the target of the execution of the action.
  """
  urlTemplate: String
}

type AddEntryPointPayload {
  entrypoint(
    filter: EntryPointFilter
    order: EntryPointOrder
    first: Int
    offset: Int
  ): [EntryPoint]
  numUids: Int
}

input AddFollowerRoleInput {
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
  关注设置,如关注最新产品信息
  """
  settings: String
}

type AddFollowerRolePayload {
  followerrole(
    filter: FollowerRoleFilter
    order: FollowerRoleOrder
    first: Int
    offset: Int
  ): [FollowerRole]
  numUids: Int
}

input AddGeneralOrganizationInput {
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]
  hasPartyRoleName: [PartyRoleNameRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  availableConversations: [ConversationRef]
  defaultConversation: ConversationRef
}

type AddGeneralOrganizationPayload {
  generalorganization(
    filter: GeneralOrganizationFilter
    order: GeneralOrganizationOrder
    first: Int
    offset: Int
  ): [GeneralOrganization]
  numUids: Int
}

input AddMemberRoleInput {
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      【会员编号】
  """
  number: String
}

type AddMemberRolePayload {
  memberrole(
    filter: MemberRoleFilter
    order: MemberRoleOrder
    first: Int
    offset: Int
  ): [MemberRole]
  numUids: Int
}

input AddMessageInput {
  hasReadNotes: [ReadNoteRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  isMessageOf: [ConversationRef]
  sender: UserRef!

  """
      【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent.
  """
  dateSent: DateTime
  toRecipient: UserRef

  """
      【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has
  been read by the recipient if a single recipient exists.
  """
  dateRead: DateTime

  """
      【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists.
  """
  dateReceived: DateTime
  recipient: [UserRef]
  hasReviews: [ReviewRef]
}

type AddMessagePayload {
  message(
    filter: MessageFilter
    order: MessageOrder
    first: Int
    offset: Int
  ): [Message]
  numUids: Int
}

input AddNamespaceInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      资源对象所属的namespace,根据一定规则由平台生成或配置定义如：io.shurui.store001.order, 默认值是default
  如果某个角色拥有inamespace：'io.shurui'的权限，则拥有'io.shurui'一下所有子namespace的相应权限
  """
  namespace: String
}

type AddNamespacePayload {
  namespace(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace]
  numUids: Int
}

input AddOfferInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      商品价格The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  """
  price: Int

  """
      【价格有效开始日期】
  """
  dateFrom: DateTime

  """
      【价格有效结束日期】
  """
  dateThrough: DateTime
}

type AddOfferPayload {
  offer(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]
  numUids: Int
}

input AddOwnershipInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  owned: ThingRef

  """
      【开始日期】 某事的开始日期和时间
  """
  dateFrom: DateTime

  """
      【结束日期】 活动（事件）结束时间。 The end date and time of the item (in ISO 8601 date format).
  """
  dateThrough: DateTime
}

type AddOwnershipPayload {
  ownership(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  numUids: Int
}

input AddPartyRoleNameInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      角色分组,如员工角色组、会员角色组
  """
  group: String
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

type AddPartyRoleNamePayload {
  partyrolename(
    filter: PartyRoleNameFilter
    order: PartyRoleNameOrder
    first: Int
    offset: Int
  ): [PartyRoleName]
  numUids: Int
}

input AddPersonInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]

  """
      个人身份证ID
  """
  personalID: String!

  """
  【姓】 姓。 在美国，是一个人姓名中的最后一个字。 Family name. In the U.S., the last name of an
  Person. This can be used along with givenName instead of the name property.
  """
  familyName: String

  """
  【名】 名。在美国，是一个人名字中的第一个字 Given name. In the U.S., the first name of a Person.
  This can be used along with familyName instead of the name property.
  """
  givenName: String
  hasUser: UserRef
}

type AddPersonPayload {
  person(
    filter: PersonFilter
    order: PersonOrder
    first: Int
    offset: Int
  ): [Person]
  numUids: Int
}

input AddProductInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  isShoppingable: Boolean
  hasModels: [ProductModelRef]
}

input AddProductModelInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  isShoppingable: Boolean
  isModelOf: ProductRef
}

type AddProductModelPayload {
  productmodel(
    filter: ProductModelFilter
    order: ProductModelOrder
    first: Int
    offset: Int
  ): [ProductModel]
  numUids: Int
}

type AddProductPayload {
  product(
    filter: ProductFilter
    order: ProductOrder
    first: Int
    offset: Int
  ): [Product]
  numUids: Int
}

input AddReadNoteInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  reader: UserRef

  """
      【阅读日期】
  """
  dateRead: DateTime
}

type AddReadNotePayload {
  readnote(
    filter: ReadNoteFilter
    order: ReadNoteOrder
    first: Int
    offset: Int
  ): [ReadNote]
  numUids: Int
}

input AddReviewInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  itemReviewed: ThingRef

  """
  reviewAspect	Text 	This Review or Rating is relevant to this part or facet of the itemReviewed.
  """
  reviewAspect: String

  """
  reviewBody	Text 	The actual body of the review.
  """
  reviewBody: String

  """
      ratingValue	评分 The rating for the content.
  """
  ratingValue: Int
  author: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。
  """
  dateCreated: DateTime
}

type AddReviewPayload {
  review(
    filter: ReviewFilter
    order: ReviewOrder
    first: Int
    offset: Int
  ): [Review]
  numUids: Int
}

input AddSoftwareApplicationInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      applicationSuite	Text 	The name of the application suite to which the
  application belongs (e.g. Excel belongs to Office).
  """
  applicationSuite: String

  """
      availableOnDevice	Text 	Device required to run the application. Used in
  cases where a specific make/model is required to run the application.
  Supersedes device.    countriesNotSupported	Text 	Countries for which the
  application is not supported. You can also provide the two-letter ISO 3166-1
  alpha-2 country code.    countriesSupported	Text 	Countries for which the
  application is supported. You can also provide the two-letter ISO 3166-1
  alpha-2 country code.    downloadUrl	URL 	If the file can be downloaded, URL
  to download the binary.
  """
  downloadUrl: String

  """
      featureList	Text  or URL 	Features or modules provided by this application
  (and possibly required by other applications).
  """
  featureList: String

  """
      fileSize	Text 	Size of the application / package (e.g. 18MB). In the
  absence of a unit (MB, KB etc.), KB will be assumed.    installUrl	URL 	URL at
  which the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """
      memoryRequirements	Text  or URL 	Minimum memory requirements.
  operatingSystem	Text 	Operating systems supported (Windows 7, OSX 10.6,
  Android 1.6).    permissions	Text 	Permission(s) required to run the app (for
  example, a mobile app may require full internet access or may run only on
  wifi).    processorRequirements	Text 	Processor architecture required to run
  the application (e.g. IA64).    releaseNotes	Text  or URL 	Description of what
  changed in this version.
  """
  releaseNotes: String

  """
      screenshot	ImageObject  or URL 	A link to a screenshot image of the app.
  """
  screenshot: String

  """
      softwareAddOn	SoftwareApplication 	Additional content for a software
  application.    softwareHelp	CreativeWork 	Software application help.
  softwareRequirements	Text  or URL 	Component dependency requirements for
  application. This includes runtime environments and shared libraries that are
  not included in the application distribution package, but required to run the
  application (Examples: DirectX, Java or .NET runtime). Supersedes
  requirements.    softwareVersion	Text 	Version of the software instance.
  storageRequirements	Text  or URL 	Storage requirements (free space required).
    supportingData	DataFeed 	Supporting data for a SoftwareApplication.
  """
  softwareVersion: String
}

type AddSoftwareApplicationPayload {
  softwareapplication(
    filter: SoftwareApplicationFilter
    order: SoftwareApplicationOrder
    first: Int
    offset: Int
  ): [SoftwareApplication]
  numUids: Int
}

input AddStoreInput {
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]
  hasPartyRoleName: [PartyRoleNameRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  employees: [EmployeeRoleRef]
  followers: [FollowerRoleRef]
  members: [MemberRoleRef]

  """
      【创建日期】
  """
  dateCreated: DateTime

  """
      【更新日期】
  """
  dateModified: DateTime
  creator: UserRef
}

type AddStorePayload {
  store(
    filter: StoreFilter
    order: StoreOrder
    first: Int
    offset: Int
  ): [Store]
  numUids: Int
}

input AddUserInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      The username used to login.    We also want to make sure that usernames are
  unique. The @id directive takes care of that - it also automatically adds hash
  searching, so we can drop the @search(by: [hash]), though having it also
  causes no harm.
  """
  username: String!

  """
      The password used to login.
  """
  password: String!

  """
      The user's public profile bio.
  """
  bio: String
  isUserOf: PersonRef
}

type AddUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input AddWebhookInput {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String!
  alternateName: String
  description: String

  """
      回调url
  """
  payloadUrl: String

  """
      回调提交的数据内容类型如application/json
  """
  contentType: String

  """
      使用payloadUrl的安全token
  """
  secret: String
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated	DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  client: SoftwareApplicationRef
}

type AddWebhookPayload {
  webhook(
    filter: WebhookFilter
    order: WebhookOrder
    first: Int
    offset: Int
  ): [Webhook]
  numUids: Int
}

"""
【对话】组织之间或特定主题的人员之间的一个或多个消息。 可以使用isPartOf或hasPart属性将个人消息链接到会话。 One or more
messages between organizations or people on a particular topic. Individual
messages can be linked to the conversation with isPartOf or hasPart properties.
"""
type Conversation implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      【关于】 事物的关于信息 The subject matter of the content.
  """
  about(filter: ThingFilter): Thing

  """
      【负责人】 对CreativeWork负有法律责任的特定的人。 Specifies the Person that is legally accountable for the CreativeWork.
  """
  accountablePerson(filter: UserFilter): User

  """
      【作者】 该 CreativeWork 的创作者/作者。
  """
  creator(filter: UserFilter): User

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime

  """
      【所在数据集目录】所在的数据集目录 A data catalog which contains this dataset.
  """
  includedInDataCatalog(filter: DataCatalogFilter): DataCatalog

  """
      参照 hasPart【作品组件】 表示某个作品是该作品的一部分
  """
  hasMessages(
    filter: MessageFilter
    order: MessageOrder
    first: Int
    offset: Int
  ): [Message]

  """
      本会话Conversation给第三方软件如Github、阿里云代码创建的webhook，第三方软件向本会话推送事件消息
  """
  webhook(
    filter: WebhookFilter
    order: WebhookOrder
    first: Int
    offset: Int
  ): [Webhook]
}

input ConversationFilter {
  name: StringHashFilter
  id: [ID!]
  and: ConversationFilter
  or: ConversationFilter
  not: ConversationFilter
}

input ConversationOrder {
  asc: ConversationOrderable
  desc: ConversationOrderable
  then: ConversationOrder
}

enum ConversationOrderable {
  identifier
  name
  alternateName
  description
  dateCreated
}

input ConversationPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  about: ThingRef
  accountablePerson: UserRef
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  includedInDataCatalog: DataCatalogRef
  hasMessages: [MessageRef]
  webhook: [WebhookRef]
}

input ConversationRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  about: ThingRef
  accountablePerson: UserRef
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  includedInDataCatalog: DataCatalogRef
  hasMessages: [MessageRef]
  webhook: [WebhookRef]
}

"""
Canonical URL: http://cnschema.org/DataCatalog【数据目录】数据集的目录 A collection of datasets.
"""
type DataCatalog implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      【所在父数据集目录】所在的父数据集目录 A data catalog which contains this dataset.
  """
  parentDataCatalog(filter: DataCatalogFilter): DataCatalog

  """
      【包含子数据集目录】包含子的数据集目录
  """
  subDataCatalogs(
    filter: DataCatalogFilter
    order: DataCatalogOrder
    first: Int
    offset: Int
  ): [DataCatalog]

  """
      【作者】 该 CreativeWork 的创作者/作者。
  """
  creator(filter: UserFilter): User

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

input DataCatalogFilter {
  name: StringHashFilter
  id: [ID!]
  and: DataCatalogFilter
  or: DataCatalogFilter
  not: DataCatalogFilter
}

input DataCatalogOrder {
  asc: DataCatalogOrderable
  desc: DataCatalogOrderable
  then: DataCatalogOrder
}

enum DataCatalogOrderable {
  identifier
  name
  alternateName
  description
  dateCreated
}

input DataCatalogPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  parentDataCatalog: DataCatalogRef
  subDataCatalogs: [DataCatalogRef]
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

input DataCatalogRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  parentDataCatalog: DataCatalogRef
  subDataCatalogs: [DataCatalogRef]
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

scalar DateTime

input DateTimeFilter {
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
}

type DeleteConversationPayload {
  msg: String
  numUids: Int
}

type DeleteDataCatalogPayload {
  msg: String
  numUids: Int
}

type DeleteEmployeeRolePayload {
  msg: String
  numUids: Int
}

type DeleteEntryPointPayload {
  msg: String
  numUids: Int
}

type DeleteFollowerRolePayload {
  msg: String
  numUids: Int
}

type DeleteGeneralOrganizationPayload {
  msg: String
  numUids: Int
}

type DeleteMemberRolePayload {
  msg: String
  numUids: Int
}

type DeleteMessagePayload {
  msg: String
  numUids: Int
}

type DeleteNamespacePayload {
  msg: String
  numUids: Int
}

type DeleteOfferPayload {
  msg: String
  numUids: Int
}

type DeleteOwnershipPayload {
  msg: String
  numUids: Int
}

type DeletePartyRoleNamePayload {
  msg: String
  numUids: Int
}

type DeletePersonPayload {
  msg: String
  numUids: Int
}

type DeleteProductModelPayload {
  msg: String
  numUids: Int
}

type DeleteProductPayload {
  msg: String
  numUids: Int
}

type DeleteReadNotePayload {
  msg: String
  numUids: Int
}

type DeleteReviewPayload {
  msg: String
  numUids: Int
}

type DeleteSoftwareApplicationPayload {
  msg: String
  numUids: Int
}

type DeleteStorePayload {
  msg: String
  numUids: Int
}

type DeleteThingPayload {
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  msg: String
  numUids: Int
}

type DeleteWebhookPayload {
  msg: String
  numUids: Int
}

enum DgraphIndex {
  int
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
}

"""
[【雇员角色】OrganizationRole的子类，描述雇员关系,有时间限制](http://cnschema.org/EmployeeRole)
"""
type EmployeeRole implements Thing & PartyRole {
  person(filter: PersonFilter): Person
  roleName(filter: PartyRoleNameFilter): PartyRoleName
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      【员工编号】
  """
  number: String
}

input EmployeeRoleFilter {
  name: StringHashFilter
  id: [ID!]
  and: EmployeeRoleFilter
  or: EmployeeRoleFilter
  not: EmployeeRoleFilter
}

input EmployeeRoleOrder {
  asc: EmployeeRoleOrderable
  desc: EmployeeRoleOrderable
  then: EmployeeRoleOrder
}

enum EmployeeRoleOrderable {
  dateFrom
  dateThrough
  identifier
  name
  alternateName
  description
  number
}

input EmployeeRolePatch {
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      【员工编号】
  """
  number: String
}

input EmployeeRoleRef {
  id: ID
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      【员工编号】
  """
  number: String
}

"""
http://cnschema.org/EntryPoint 入口】一个入口，包含一些基于web的协议 An entry point, within some Web-based protocol.
"""
type EntryPoint implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  【链接模版】 一个URL的模版，可以利用变化参数形成完整的URL。 An url template (RFC6570) that will be used
  to construct the target of the execution of the action.
  """
  urlTemplate: String
}

input EntryPointFilter {
  name: StringHashFilter
  id: [ID!]
  and: EntryPointFilter
  or: EntryPointFilter
  not: EntryPointFilter
}

input EntryPointOrder {
  asc: EntryPointOrderable
  desc: EntryPointOrderable
  then: EntryPointOrder
}

enum EntryPointOrderable {
  identifier
  name
  alternateName
  description
  urlTemplate
}

input EntryPointPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  【链接模版】 一个URL的模版，可以利用变化参数形成完整的URL。 An url template (RFC6570) that will be used
  to construct the target of the execution of the action.
  """
  urlTemplate: String
}

input EntryPointRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  【链接模版】 一个URL的模版，可以利用变化参数形成完整的URL。 An url template (RFC6570) that will be used
  to construct the target of the execution of the action.
  """
  urlTemplate: String
}

input FloatFilter {
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
}

"""
[【社交关注角色】FollowerRole)
"""
type FollowerRole implements Thing & PartyRole {
  person(filter: PersonFilter): Person
  roleName(filter: PartyRoleNameFilter): PartyRoleName
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  关注设置,如关注最新产品信息
  """
  settings: String
}

input FollowerRoleFilter {
  name: StringHashFilter
  id: [ID!]
  and: FollowerRoleFilter
  or: FollowerRoleFilter
  not: FollowerRoleFilter
}

input FollowerRoleOrder {
  asc: FollowerRoleOrderable
  desc: FollowerRoleOrderable
  then: FollowerRoleOrder
}

enum FollowerRoleOrderable {
  dateFrom
  dateThrough
  identifier
  name
  alternateName
  description
  settings
}

input FollowerRolePatch {
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  关注设置,如关注最新产品信息
  """
  settings: String
}

input FollowerRoleRef {
  id: ID
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
  关注设置,如关注最新产品信息
  """
  settings: String
}

"""
【一般机构】一个组织，例如学校、非政府组织、公司、俱乐部等 An organization such as a school, NGO,
corporation, club, etc.也用于临时几个人组成的聊天小组，房间http://cnschema.org/Organization
"""
type GeneralOrganization implements Thing & Organization & Party {
  owns(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  hasNamespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  parentOrganization(first: Int, offset: Int): [Organization]
  subOrganizations(first: Int, offset: Int): [Organization]
  departments(first: Int, offset: Int): [Organization]
  hasPartyRoleName(
    filter: PartyRoleNameFilter
    order: PartyRoleNameOrder
    first: Int
    offset: Int
  ): [PartyRoleName]
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  可以访问的会话
  """
  availableConversations(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]

  """
   本组织默认可访问的会话
  """
  defaultConversation(filter: ConversationFilter): Conversation
}

input GeneralOrganizationFilter {
  name: StringHashFilter
  id: [ID!]
  and: GeneralOrganizationFilter
  or: GeneralOrganizationFilter
  not: GeneralOrganizationFilter
}

input GeneralOrganizationOrder {
  asc: GeneralOrganizationOrderable
  desc: GeneralOrganizationOrderable
  then: GeneralOrganizationOrder
}

enum GeneralOrganizationOrderable {
  identifier
  name
  alternateName
  description
}

input GeneralOrganizationPatch {
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]
  hasPartyRoleName: [PartyRoleNameRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  availableConversations: [ConversationRef]
  defaultConversation: ConversationRef
}

input GeneralOrganizationRef {
  id: ID
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]
  hasPartyRoleName: [PartyRoleNameRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  availableConversations: [ConversationRef]
  defaultConversation: ConversationRef
}

input IntFilter {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
}

"""
[【会员角色】OrganizationRole的子类，描述会员关系,有时间限制](http://cnschema.org/EmployeeRole)
"""
type MemberRole implements Thing & PartyRole {
  person(filter: PersonFilter): Person
  roleName(filter: PartyRoleNameFilter): PartyRoleName
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      【会员编号】
  """
  number: String
}

input MemberRoleFilter {
  name: StringHashFilter
  id: [ID!]
  and: MemberRoleFilter
  or: MemberRoleFilter
  not: MemberRoleFilter
}

input MemberRoleOrder {
  asc: MemberRoleOrderable
  desc: MemberRoleOrderable
  then: MemberRoleOrder
}

enum MemberRoleOrderable {
  dateFrom
  dateThrough
  identifier
  name
  alternateName
  description
  number
}

input MemberRolePatch {
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      【会员编号】
  """
  number: String
}

input MemberRoleRef {
  id: ID
  person: PersonRef
  roleName: PartyRoleNameRef
  dateFrom: DateTime
  dateThrough: DateTime
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      【会员编号】
  """
  number: String
}

"""
【消息】由发送者发给一个或多个组织或个人的信息 A single message from a sender to one or more organizations or people.
"""
type Message implements Thing & Readable {
  hasReadNotes(
    filter: ReadNoteFilter
    order: ReadNoteOrder
    first: Int
    offset: Int
  ): [ReadNote]
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      参照isPartOf【从属于】 是它的一部分 Indicates an item or CreativeWork that this item, or
  CreativeWork (in some sense), is part of.
  """
  isMessageOf(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]

  """
      【发送者】 参与者的子属性。例如邮件的发送者。 A sub property of participant. The participant who is at the sending end of the action.
  """
  sender(filter: UserFilter): User!

  """
      【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent.
  """
  dateSent: DateTime

  """
      【收件人】 消息的直接收件人 A sub property of recipient. The recipient who was directly sent the message.
  """
  toRecipient(filter: UserFilter): User

  """
      【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has
  been read by the recipient if a single recipient exists.
  """
  dateRead: DateTime

  """
      【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists.
  """
  dateReceived: DateTime

  """
      【接收者】 参与者的子属性。 在行动接收端的参与者。 A sub property of participant. The participant
  who is at the receiving end of the action.
  """
  recipient(
    filter: UserFilter
    order: UserOrder
    first: Int
    offset: Int
  ): [User]

  """
      【评论】 评论，一般是用户对CreativeWork的评论。
  """
  hasReviews(
    filter: ReviewFilter
    order: ReviewOrder
    first: Int
    offset: Int
  ): [Review]
}

input MessageFilter {
  name: StringHashFilter
  id: [ID!]
  and: MessageFilter
  or: MessageFilter
  not: MessageFilter
}

input MessageOrder {
  asc: MessageOrderable
  desc: MessageOrderable
  then: MessageOrder
}

enum MessageOrderable {
  identifier
  name
  alternateName
  description
  dateSent
  dateRead
  dateReceived
}

input MessagePatch {
  hasReadNotes: [ReadNoteRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  isMessageOf: [ConversationRef]
  sender: UserRef

  """
      【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent.
  """
  dateSent: DateTime
  toRecipient: UserRef

  """
      【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has
  been read by the recipient if a single recipient exists.
  """
  dateRead: DateTime

  """
      【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists.
  """
  dateReceived: DateTime
  recipient: [UserRef]
  hasReviews: [ReviewRef]
}

input MessageRef {
  id: ID
  hasReadNotes: [ReadNoteRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  isMessageOf: [ConversationRef]
  sender: UserRef

  """
      【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent.
  """
  dateSent: DateTime
  toRecipient: UserRef

  """
      【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has
  been read by the recipient if a single recipient exists.
  """
  dateRead: DateTime

  """
      【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists.
  """
  dateReceived: DateTime
  recipient: [UserRef]
  hasReviews: [ReviewRef]
}

type Mutation {
  updateThing(input: UpdateThingInput!): UpdateThingPayload
  deleteThing(filter: ThingFilter!): DeleteThingPayload
  addNamespace(input: [AddNamespaceInput!]!): AddNamespacePayload
  updateNamespace(input: UpdateNamespaceInput!): UpdateNamespacePayload
  deleteNamespace(filter: NamespaceFilter!): DeleteNamespacePayload
  addPartyRoleName(input: [AddPartyRoleNameInput!]!): AddPartyRoleNamePayload
  updatePartyRoleName(
    input: UpdatePartyRoleNameInput!
  ): UpdatePartyRoleNamePayload
  deletePartyRoleName(filter: PartyRoleNameFilter!): DeletePartyRoleNamePayload
  addDataCatalog(input: [AddDataCatalogInput!]!): AddDataCatalogPayload
  updateDataCatalog(input: UpdateDataCatalogInput!): UpdateDataCatalogPayload
  deleteDataCatalog(filter: DataCatalogFilter!): DeleteDataCatalogPayload
  addConversation(input: [AddConversationInput!]!): AddConversationPayload
  updateConversation(input: UpdateConversationInput!): UpdateConversationPayload
  deleteConversation(filter: ConversationFilter!): DeleteConversationPayload
  addMessage(input: [AddMessageInput!]!): AddMessagePayload
  updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
  deleteMessage(filter: MessageFilter!): DeleteMessagePayload
  addReview(input: [AddReviewInput!]!): AddReviewPayload
  updateReview(input: UpdateReviewInput!): UpdateReviewPayload
  deleteReview(filter: ReviewFilter!): DeleteReviewPayload
  addReadNote(input: [AddReadNoteInput!]!): AddReadNotePayload
  updateReadNote(input: UpdateReadNoteInput!): UpdateReadNotePayload
  deleteReadNote(filter: ReadNoteFilter!): DeleteReadNotePayload
  addGeneralOrganization(
    input: [AddGeneralOrganizationInput!]!
  ): AddGeneralOrganizationPayload
  updateGeneralOrganization(
    input: UpdateGeneralOrganizationInput!
  ): UpdateGeneralOrganizationPayload
  deleteGeneralOrganization(
    filter: GeneralOrganizationFilter!
  ): DeleteGeneralOrganizationPayload
  addEmployeeRole(input: [AddEmployeeRoleInput!]!): AddEmployeeRolePayload
  updateEmployeeRole(input: UpdateEmployeeRoleInput!): UpdateEmployeeRolePayload
  deleteEmployeeRole(filter: EmployeeRoleFilter!): DeleteEmployeeRolePayload
  addFollowerRole(input: [AddFollowerRoleInput!]!): AddFollowerRolePayload
  updateFollowerRole(input: UpdateFollowerRoleInput!): UpdateFollowerRolePayload
  deleteFollowerRole(filter: FollowerRoleFilter!): DeleteFollowerRolePayload
  addMemberRole(input: [AddMemberRoleInput!]!): AddMemberRolePayload
  updateMemberRole(input: UpdateMemberRoleInput!): UpdateMemberRolePayload
  deleteMemberRole(filter: MemberRoleFilter!): DeleteMemberRolePayload
  addOwnership(input: [AddOwnershipInput!]!): AddOwnershipPayload
  updateOwnership(input: UpdateOwnershipInput!): UpdateOwnershipPayload
  deleteOwnership(filter: OwnershipFilter!): DeleteOwnershipPayload
  addUser(input: [AddUserInput!]!): AddUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(filter: UserFilter!): DeleteUserPayload
  addPerson(input: [AddPersonInput!]!): AddPersonPayload
  updatePerson(input: UpdatePersonInput!): UpdatePersonPayload
  deletePerson(filter: PersonFilter!): DeletePersonPayload
  addStore(input: [AddStoreInput!]!): AddStorePayload
  updateStore(input: UpdateStoreInput!): UpdateStorePayload
  deleteStore(filter: StoreFilter!): DeleteStorePayload
  addProduct(input: [AddProductInput!]!): AddProductPayload
  updateProduct(input: UpdateProductInput!): UpdateProductPayload
  deleteProduct(filter: ProductFilter!): DeleteProductPayload
  addProductModel(input: [AddProductModelInput!]!): AddProductModelPayload
  updateProductModel(input: UpdateProductModelInput!): UpdateProductModelPayload
  deleteProductModel(filter: ProductModelFilter!): DeleteProductModelPayload
  addOffer(input: [AddOfferInput!]!): AddOfferPayload
  updateOffer(input: UpdateOfferInput!): UpdateOfferPayload
  deleteOffer(filter: OfferFilter!): DeleteOfferPayload
  addEntryPoint(input: [AddEntryPointInput!]!): AddEntryPointPayload
  updateEntryPoint(input: UpdateEntryPointInput!): UpdateEntryPointPayload
  deleteEntryPoint(filter: EntryPointFilter!): DeleteEntryPointPayload
  addSoftwareApplication(
    input: [AddSoftwareApplicationInput!]!
  ): AddSoftwareApplicationPayload
  updateSoftwareApplication(
    input: UpdateSoftwareApplicationInput!
  ): UpdateSoftwareApplicationPayload
  deleteSoftwareApplication(
    filter: SoftwareApplicationFilter!
  ): DeleteSoftwareApplicationPayload
  addWebhook(input: [AddWebhookInput!]!): AddWebhookPayload
  updateWebhook(input: UpdateWebhookInput!): UpdateWebhookPayload
  deleteWebhook(filter: WebhookFilter!): DeleteWebhookPayload
}

"""
资源对象所属的namespace,根据一定规则由平台生成或配置定义如：io.shurui.store001.order,
默认值是default如果某个角色拥有inamespace：'io.shurui'的权限，则拥有'io.shurui'一下所有子namespace的相应权限
"""
type Namespace implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      资源对象所属的namespace,根据一定规则由平台生成或配置定义如：io.shurui.store001.order, 默认值是default
  如果某个角色拥有inamespace：'io.shurui'的权限，则拥有'io.shurui'一下所有子namespace的相应权限
  """
  namespace: String

  """
      拥有namespace的组织或用户
  """
  isNamespaceOf: Party
}

input NamespaceFilter {
  name: StringHashFilter
  id: [ID!]
  namespace: StringExactFilter_StringRegExpFilter
  and: NamespaceFilter
  or: NamespaceFilter
  not: NamespaceFilter
}

input NamespaceOrder {
  asc: NamespaceOrderable
  desc: NamespaceOrderable
  then: NamespaceOrder
}

enum NamespaceOrderable {
  identifier
  name
  alternateName
  description
  namespace
}

input NamespacePatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      资源对象所属的namespace,根据一定规则由平台生成或配置定义如：io.shurui.store001.order, 默认值是default
  如果某个角色拥有inamespace：'io.shurui'的权限，则拥有'io.shurui'一下所有子namespace的相应权限
  """
  namespace: String
}

input NamespaceRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      资源对象所属的namespace,根据一定规则由平台生成或配置定义如：io.shurui.store001.order, 默认值是default
  如果某个角色拥有inamespace：'io.shurui'的权限，则拥有'io.shurui'一下所有子namespace的相应权限
  """
  namespace: String
}

"""
商品供应
"""
type Offer implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      可购物的一个商品供应
  """
  itemOffered: Shoppingable

  """
      供应商品的组织或个人 Inverse property: makesOffer.
  """
  offeredBy: Party

  """
      商品价格The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  """
  price: Int

  """
      【价格有效开始日期】
  """
  dateFrom: DateTime

  """
      【价格有效结束日期】
  """
  dateThrough: DateTime
}

input OfferFilter {
  name: StringHashFilter
  id: [ID!]
  and: OfferFilter
  or: OfferFilter
  not: OfferFilter
}

input OfferOrder {
  asc: OfferOrderable
  desc: OfferOrderable
  then: OfferOrder
}

enum OfferOrderable {
  identifier
  name
  alternateName
  description
  price
  dateFrom
  dateThrough
}

input OfferPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      商品价格The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  """
  price: Int

  """
      【价格有效开始日期】
  """
  dateFrom: DateTime

  """
      【价格有效结束日期】
  """
  dateThrough: DateTime
}

input OfferRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      商品价格The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  """
  price: Int

  """
      【价格有效开始日期】
  """
  dateFrom: DateTime

  """
      【价格有效结束日期】
  """
  dateThrough: DateTime
}

"""
【机构】一个组织，例如学校、非政府组织、公司、俱乐部等,也可用于临时几个人组成的聊天小组，房间
"""
interface Organization {
  """
      【上级组织】 subOrganization的反向属性，即包含这个组织的更大组织
  """
  parentOrganization(first: Int, offset: Int): [Organization]

  """
      【子机构】 两个组织之间的关系。其中第二个组织，例如以子公司的名字，属于第一个组织。
  """
  subOrganizations(first: Int, offset: Int): [Organization]

  """
      【部门】 组织与该组织某个部门之间的关系，也被描述成组织（允许不同的网址，标识，开放时间）。 例如：一家有药店的商店，或者是一间带咖啡厅的面包店。 A
  relationship between an organization and a department of that organization,
  also described as an organization (allowing different urls, logos, opening
  hours). For example: a store with a pharmacy, or a bakery with a cafe.
  """
  departments(first: Int, offset: Int): [Organization]

  """
      组织定义的角色名称,hasPartyRoleName,逆属性 PartyRoleName.isPartyRoleNameOf
  """
  hasPartyRoleName(
    filter: PartyRoleNameFilter
    order: PartyRoleNameOrder
    first: Int
    offset: Int
  ): [PartyRoleName]
}

"""
描述产品的所有者或所属机构的信息
"""
type Ownership implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      【获取来源】 产品获取的机构来源 The organization or person from which the product was acquired.
  """
  acquiredFrom: Party

  """
      【东西类型】 拥有的东西Thing。
  """
  owned(filter: ThingFilter): Thing

  """
      【个人或组织】拥有者
  """
  owner: Party

  """
      【开始日期】 某事的开始日期和时间
  """
  dateFrom: DateTime

  """
      【结束日期】 活动（事件）结束时间。 The end date and time of the item (in ISO 8601 date format).
  """
  dateThrough: DateTime
}

input OwnershipFilter {
  name: StringHashFilter
  id: [ID!]
  and: OwnershipFilter
  or: OwnershipFilter
  not: OwnershipFilter
}

input OwnershipOrder {
  asc: OwnershipOrderable
  desc: OwnershipOrderable
  then: OwnershipOrder
}

enum OwnershipOrderable {
  identifier
  name
  alternateName
  description
  dateFrom
  dateThrough
}

input OwnershipPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  owned: ThingRef

  """
      【开始日期】 某事的开始日期和时间
  """
  dateFrom: DateTime

  """
      【结束日期】 活动（事件）结束时间。 The end date and time of the item (in ISO 8601 date format).
  """
  dateThrough: DateTime
}

input OwnershipRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  owned: ThingRef

  """
      【开始日期】 某事的开始日期和时间
  """
  dateFrom: DateTime

  """
      【结束日期】 活动（事件）结束时间。 The end date and time of the item (in ISO 8601 date format).
  """
  dateThrough: DateTime
}

"""
Party 团体:代表有行动能力的个人或组织
"""
interface Party {
  """
      【拥有】 组织或个人拥有的产品 逆属性 Ownable.ownedBy，Products owned by the organization or person.
  """
  owns(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]

  """
      拥有的namespace
  """
  hasNamespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
}

"""
【团体内部定义的角色】
"""
interface PartyRole {
  """
      在组织承担角色的个人
  """
  person(filter: PersonFilter): Person

  """
      个人在团体内承担的角色
  """
  roleName(filter: PartyRoleNameFilter): PartyRoleName

  """
      【开始日期】 某事的开始日期和时间
  """
  dateFrom: DateTime

  """
      【结束日期】 活动（事件）结束时间。 The end date and time of the item (in ISO 8601 date format).
  """
  dateThrough: DateTime
}

"""
组织定义的角色，组织内统筹定义
"""
type PartyRoleName implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      isPartyRoleNameOf,逆属性 Organization.hasPartyRoleName
  """
  isRoleNameOf: Organization

  """
      角色分组,如员工角色组、会员角色组
  """
  group: String

  """
      【作者】 该 CreativeWork 的创作者/作者。跟CreativeWork的Author属性一样。 The creator/author of
  this CreativeWork. This is the same as the Author property for
  CreativeWork.creator    Organization or Person or CreativeWork or UserReviews
  """
  creator(filter: UserFilter): User

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

input PartyRoleNameFilter {
  name: StringHashFilter
  id: [ID!]
  and: PartyRoleNameFilter
  or: PartyRoleNameFilter
  not: PartyRoleNameFilter
}

input PartyRoleNameOrder {
  asc: PartyRoleNameOrderable
  desc: PartyRoleNameOrderable
  then: PartyRoleNameOrder
}

enum PartyRoleNameOrderable {
  identifier
  name
  alternateName
  description
  group
  dateCreated
}

input PartyRoleNamePatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      角色分组,如员工角色组、会员角色组
  """
  group: String
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

input PartyRoleNameRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      角色分组,如员工角色组、会员角色组
  """
  group: String
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated    DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
}

input PartyRoleOrder {
  asc: PartyRoleOrderable
  desc: PartyRoleOrderable
  then: PartyRoleOrder
}

enum PartyRoleOrderable {
  dateFrom
  dateThrough
}

"""
个人,可能在平台里有一个且唯一的用户账号User
"""
type Person implements Party & Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!
  owns(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  hasNamespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]

  """
      个人身份证ID
  """
  personalID: String!

  """
  【姓】 姓。 在美国，是一个人姓名中的最后一个字。 Family name. In the U.S., the last name of an
  Person. This can be used along with givenName instead of the name property.
  """
  familyName: String

  """
  【名】 名。在美国，是一个人名字中的第一个字 Given name. In the U.S., the first name of a Person.
  This can be used along with familyName instead of the name property.
  """
  givenName: String

  """
  本人所拥有的用户账号，逆属性User.isUserOf，参考Inverse property: isPartOf
  """
  hasUser(filter: UserFilter): User
}

input PersonFilter {
  name: StringHashFilter
  id: [ID!]
  and: PersonFilter
  or: PersonFilter
  not: PersonFilter
}

input PersonOrder {
  asc: PersonOrderable
  desc: PersonOrderable
  then: PersonOrder
}

enum PersonOrderable {
  identifier
  name
  alternateName
  description
  personalID
  familyName
  givenName
}

input PersonPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]

  """
      个人身份证ID
  """
  personalID: String

  """
  【姓】 姓。 在美国，是一个人姓名中的最后一个字。 Family name. In the U.S., the last name of an
  Person. This can be used along with givenName instead of the name property.
  """
  familyName: String

  """
  【名】 名。在美国，是一个人名字中的第一个字 Given name. In the U.S., the first name of a Person.
  This can be used along with familyName instead of the name property.
  """
  givenName: String
  hasUser: UserRef
}

input PersonRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]

  """
      个人身份证ID
  """
  personalID: String

  """
  【姓】 姓。 在美国，是一个人姓名中的最后一个字。 Family name. In the U.S., the last name of an
  Person. This can be used along with givenName instead of the name property.
  """
  familyName: String

  """
  【名】 名。在美国，是一个人名字中的第一个字 Given name. In the U.S., the first name of a Person.
  This can be used along with familyName instead of the name property.
  """
  givenName: String
  hasUser: UserRef
}

"""
产品
"""
type Product implements Shoppingable & Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!
  isShoppingable: Boolean

  """
      【型号】 产品的型号。
  """
  hasModels(
    filter: ProductModelFilter
    order: ProductModelOrder
    first: Int
    offset: Int
  ): [ProductModel]
}

input ProductFilter {
  name: StringHashFilter
  id: [ID!]
  and: ProductFilter
  or: ProductFilter
  not: ProductFilter
}

"""
产品型号
"""
type ProductModel implements Shoppingable & Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!
  isShoppingable: Boolean

  """
      【产品】 所属产品。
  """
  isModelOf(filter: ProductFilter): Product
}

input ProductModelFilter {
  name: StringHashFilter
  id: [ID!]
  and: ProductModelFilter
  or: ProductModelFilter
  not: ProductModelFilter
}

input ProductModelOrder {
  asc: ProductModelOrderable
  desc: ProductModelOrderable
  then: ProductModelOrder
}

enum ProductModelOrderable {
  identifier
  name
  alternateName
  description
}

input ProductModelPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  isShoppingable: Boolean
  isModelOf: ProductRef
}

input ProductModelRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  isShoppingable: Boolean
  isModelOf: ProductRef
}

input ProductOrder {
  asc: ProductOrderable
  desc: ProductOrderable
  then: ProductOrder
}

enum ProductOrderable {
  identifier
  name
  alternateName
  description
}

input ProductPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  isShoppingable: Boolean
  hasModels: [ProductModelRef]
}

input ProductRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  isShoppingable: Boolean
  hasModels: [ProductModelRef]
}

type Query {
  getThing(id: ID!): Thing
  queryThing(
    filter: ThingFilter
    order: ThingOrder
    first: Int
    offset: Int
  ): [Thing]
  getNamespace(id: ID!): Namespace
  queryNamespace(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace]
  queryShoppingable(first: Int, offset: Int): [Shoppingable]
  queryParty(first: Int, offset: Int): [Party]
  queryOrganization(first: Int, offset: Int): [Organization]
  queryPartyRole(order: PartyRoleOrder, first: Int, offset: Int): [PartyRole]
  getPartyRoleName(id: ID!): PartyRoleName
  queryPartyRoleName(
    filter: PartyRoleNameFilter
    order: PartyRoleNameOrder
    first: Int
    offset: Int
  ): [PartyRoleName]
  queryReadable(first: Int, offset: Int): [Readable]
  getDataCatalog(id: ID!): DataCatalog
  queryDataCatalog(
    filter: DataCatalogFilter
    order: DataCatalogOrder
    first: Int
    offset: Int
  ): [DataCatalog]
  getConversation(id: ID!): Conversation
  queryConversation(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]
  getMessage(id: ID!): Message
  queryMessage(
    filter: MessageFilter
    order: MessageOrder
    first: Int
    offset: Int
  ): [Message]
  getReview(id: ID!): Review
  queryReview(
    filter: ReviewFilter
    order: ReviewOrder
    first: Int
    offset: Int
  ): [Review]
  getReadNote(id: ID!): ReadNote
  queryReadNote(
    filter: ReadNoteFilter
    order: ReadNoteOrder
    first: Int
    offset: Int
  ): [ReadNote]
  getGeneralOrganization(id: ID!): GeneralOrganization
  queryGeneralOrganization(
    filter: GeneralOrganizationFilter
    order: GeneralOrganizationOrder
    first: Int
    offset: Int
  ): [GeneralOrganization]
  getEmployeeRole(id: ID!): EmployeeRole
  queryEmployeeRole(
    filter: EmployeeRoleFilter
    order: EmployeeRoleOrder
    first: Int
    offset: Int
  ): [EmployeeRole]
  getFollowerRole(id: ID!): FollowerRole
  queryFollowerRole(
    filter: FollowerRoleFilter
    order: FollowerRoleOrder
    first: Int
    offset: Int
  ): [FollowerRole]
  getMemberRole(id: ID!): MemberRole
  queryMemberRole(
    filter: MemberRoleFilter
    order: MemberRoleOrder
    first: Int
    offset: Int
  ): [MemberRole]
  getOwnership(id: ID!): Ownership
  queryOwnership(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  getUser(id: ID, username: String): User
  queryUser(
    filter: UserFilter
    order: UserOrder
    first: Int
    offset: Int
  ): [User]
  getPerson(id: ID!): Person
  queryPerson(
    filter: PersonFilter
    order: PersonOrder
    first: Int
    offset: Int
  ): [Person]
  getStore(id: ID!): Store
  queryStore(
    filter: StoreFilter
    order: StoreOrder
    first: Int
    offset: Int
  ): [Store]
  getProduct(id: ID!): Product
  queryProduct(
    filter: ProductFilter
    order: ProductOrder
    first: Int
    offset: Int
  ): [Product]
  getProductModel(id: ID!): ProductModel
  queryProductModel(
    filter: ProductModelFilter
    order: ProductModelOrder
    first: Int
    offset: Int
  ): [ProductModel]
  getOffer(id: ID!): Offer
  queryOffer(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]
  getEntryPoint(id: ID!): EntryPoint
  queryEntryPoint(
    filter: EntryPointFilter
    order: EntryPointOrder
    first: Int
    offset: Int
  ): [EntryPoint]
  getSoftwareApplication(id: ID!): SoftwareApplication
  querySoftwareApplication(
    filter: SoftwareApplicationFilter
    order: SoftwareApplicationOrder
    first: Int
    offset: Int
  ): [SoftwareApplication]
  getWebhook(id: ID!): Webhook
  queryWebhook(
    filter: WebhookFilter
    order: WebhookOrder
    first: Int
    offset: Int
  ): [Webhook]
}

"""
可读物
"""
interface Readable {
  """
      【阅读收条】 记录每个人阅读本条消息的时间,逆属性: ReadNote.isReadNoteOf
  """
  hasReadNotes(
    filter: ReadNoteFilter
    order: ReadNoteOrder
    first: Int
    offset: Int
  ): [ReadNote]
}

"""
【阅读收条】 记录每个人阅读本条消息的时间
"""
type ReadNote implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      【阅读内容】 逆属性: Message.hasReadNotes
  """
  isReadNoteOf(first: Int, offset: Int): [Readable]

  """
      【读者】 内容的阅读者。
  """
  reader(filter: UserFilter): User

  """
      【阅读日期】
  """
  dateRead: DateTime
}

input ReadNoteFilter {
  name: StringHashFilter
  id: [ID!]
  and: ReadNoteFilter
  or: ReadNoteFilter
  not: ReadNoteFilter
}

input ReadNoteOrder {
  asc: ReadNoteOrderable
  desc: ReadNoteOrderable
  then: ReadNoteOrder
}

enum ReadNoteOrderable {
  identifier
  name
  alternateName
  description
  dateRead
}

input ReadNotePatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  reader: UserRef

  """
      【阅读日期】
  """
  dateRead: DateTime
}

input ReadNoteRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  reader: UserRef

  """
      【阅读日期】
  """
  dateRead: DateTime
}

"""
【评论】对项目的评论 - 例如对博客文章的评论。 该评论的内容是通过text属性表示的，其主题通过about，与所有CreativeWorks共享的属性来表达
A comment on an item - for example, a comment on a blog post. The comment's
content is expressed via the text property, and its topic via about, properties
shared with all CreativeWorks.
"""
type Review implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
  itemReviewed	Thing 	The item that is being reviewed/rated.
  """
  itemReviewed(filter: ThingFilter): Thing

  """
  reviewAspect	Text 	This Review or Rating is relevant to this part or facet of the itemReviewed.
  """
  reviewAspect: String

  """
  reviewBody	Text 	The actual body of the review.
  """
  reviewBody: String

  """
      ratingValue	评分 The rating for the content.
  """
  ratingValue: Int

  """
      【作者】 此内容或评分的作者。
  """
  author(filter: UserFilter): User

  """
      【创建日期】 创作出CreativeWork的日期。
  """
  dateCreated: DateTime
}

input ReviewFilter {
  name: StringHashFilter
  id: [ID!]
  and: ReviewFilter
  or: ReviewFilter
  not: ReviewFilter
}

input ReviewOrder {
  asc: ReviewOrderable
  desc: ReviewOrderable
  then: ReviewOrder
}

enum ReviewOrderable {
  identifier
  name
  alternateName
  description
  reviewAspect
  reviewBody
  ratingValue
  dateCreated
}

input ReviewPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  itemReviewed: ThingRef

  """
  reviewAspect	Text 	This Review or Rating is relevant to this part or facet of the itemReviewed.
  """
  reviewAspect: String

  """
  reviewBody	Text 	The actual body of the review.
  """
  reviewBody: String

  """
      ratingValue	评分 The rating for the content.
  """
  ratingValue: Int
  author: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。
  """
  dateCreated: DateTime
}

input ReviewRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  itemReviewed: ThingRef

  """
  reviewAspect	Text 	This Review or Rating is relevant to this part or facet of the itemReviewed.
  """
  reviewAspect: String

  """
  reviewBody	Text 	The actual body of the review.
  """
  reviewBody: String

  """
      ratingValue	评分 The rating for the content.
  """
  ratingValue: Int
  author: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。
  """
  dateCreated: DateTime
}

"""
可购物：可以购买订购的产品或服务Product，Service
"""
interface Shoppingable {
  """
  可以购买订购的产品或服务Product，Service
  """
  isShoppingable: Boolean
}

"""
https://schema.org/SoftwareApplication A software application.
"""
type SoftwareApplication implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      applicationSuite	Text 	The name of the application suite to which the
  application belongs (e.g. Excel belongs to Office).
  """
  applicationSuite: String

  """
      availableOnDevice	Text 	Device required to run the application. Used in
  cases where a specific make/model is required to run the application.
  Supersedes device.    countriesNotSupported	Text 	Countries for which the
  application is not supported. You can also provide the two-letter ISO 3166-1
  alpha-2 country code.    countriesSupported	Text 	Countries for which the
  application is supported. You can also provide the two-letter ISO 3166-1
  alpha-2 country code.    downloadUrl	URL 	If the file can be downloaded, URL
  to download the binary.
  """
  downloadUrl: String

  """
      featureList	Text  or URL 	Features or modules provided by this application
  (and possibly required by other applications).
  """
  featureList: String

  """
      fileSize	Text 	Size of the application / package (e.g. 18MB). In the
  absence of a unit (MB, KB etc.), KB will be assumed.    installUrl	URL 	URL at
  which the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """
      memoryRequirements	Text  or URL 	Minimum memory requirements.
  operatingSystem	Text 	Operating systems supported (Windows 7, OSX 10.6,
  Android 1.6).    permissions	Text 	Permission(s) required to run the app (for
  example, a mobile app may require full internet access or may run only on
  wifi).    processorRequirements	Text 	Processor architecture required to run
  the application (e.g. IA64).    releaseNotes	Text  or URL 	Description of what
  changed in this version.
  """
  releaseNotes: String

  """
      screenshot	ImageObject  or URL 	A link to a screenshot image of the app.
  """
  screenshot: String

  """
      softwareAddOn	SoftwareApplication 	Additional content for a software
  application.    softwareHelp	CreativeWork 	Software application help.
  softwareRequirements	Text  or URL 	Component dependency requirements for
  application. This includes runtime environments and shared libraries that are
  not included in the application distribution package, but required to run the
  application (Examples: DirectX, Java or .NET runtime). Supersedes
  requirements.    softwareVersion	Text 	Version of the software instance.
  storageRequirements	Text  or URL 	Storage requirements (free space required).
    supportingData	DataFeed 	Supporting data for a SoftwareApplication.
  """
  softwareVersion: String
}

input SoftwareApplicationFilter {
  name: StringHashFilter
  id: [ID!]
  and: SoftwareApplicationFilter
  or: SoftwareApplicationFilter
  not: SoftwareApplicationFilter
}

input SoftwareApplicationOrder {
  asc: SoftwareApplicationOrderable
  desc: SoftwareApplicationOrderable
  then: SoftwareApplicationOrder
}

enum SoftwareApplicationOrderable {
  identifier
  name
  alternateName
  description
  applicationSuite
  downloadUrl
  featureList
  installUrl
  releaseNotes
  screenshot
  softwareVersion
}

input SoftwareApplicationPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      applicationSuite	Text 	The name of the application suite to which the
  application belongs (e.g. Excel belongs to Office).
  """
  applicationSuite: String

  """
      availableOnDevice	Text 	Device required to run the application. Used in
  cases where a specific make/model is required to run the application.
  Supersedes device.    countriesNotSupported	Text 	Countries for which the
  application is not supported. You can also provide the two-letter ISO 3166-1
  alpha-2 country code.    countriesSupported	Text 	Countries for which the
  application is supported. You can also provide the two-letter ISO 3166-1
  alpha-2 country code.    downloadUrl	URL 	If the file can be downloaded, URL
  to download the binary.
  """
  downloadUrl: String

  """
      featureList	Text  or URL 	Features or modules provided by this application
  (and possibly required by other applications).
  """
  featureList: String

  """
      fileSize	Text 	Size of the application / package (e.g. 18MB). In the
  absence of a unit (MB, KB etc.), KB will be assumed.    installUrl	URL 	URL at
  which the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """
      memoryRequirements	Text  or URL 	Minimum memory requirements.
  operatingSystem	Text 	Operating systems supported (Windows 7, OSX 10.6,
  Android 1.6).    permissions	Text 	Permission(s) required to run the app (for
  example, a mobile app may require full internet access or may run only on
  wifi).    processorRequirements	Text 	Processor architecture required to run
  the application (e.g. IA64).    releaseNotes	Text  or URL 	Description of what
  changed in this version.
  """
  releaseNotes: String

  """
      screenshot	ImageObject  or URL 	A link to a screenshot image of the app.
  """
  screenshot: String

  """
      softwareAddOn	SoftwareApplication 	Additional content for a software
  application.    softwareHelp	CreativeWork 	Software application help.
  softwareRequirements	Text  or URL 	Component dependency requirements for
  application. This includes runtime environments and shared libraries that are
  not included in the application distribution package, but required to run the
  application (Examples: DirectX, Java or .NET runtime). Supersedes
  requirements.    softwareVersion	Text 	Version of the software instance.
  storageRequirements	Text  or URL 	Storage requirements (free space required).
    supportingData	DataFeed 	Supporting data for a SoftwareApplication.
  """
  softwareVersion: String
}

input SoftwareApplicationRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      applicationSuite	Text 	The name of the application suite to which the
  application belongs (e.g. Excel belongs to Office).
  """
  applicationSuite: String

  """
      availableOnDevice	Text 	Device required to run the application. Used in
  cases where a specific make/model is required to run the application.
  Supersedes device.    countriesNotSupported	Text 	Countries for which the
  application is not supported. You can also provide the two-letter ISO 3166-1
  alpha-2 country code.    countriesSupported	Text 	Countries for which the
  application is supported. You can also provide the two-letter ISO 3166-1
  alpha-2 country code.    downloadUrl	URL 	If the file can be downloaded, URL
  to download the binary.
  """
  downloadUrl: String

  """
      featureList	Text  or URL 	Features or modules provided by this application
  (and possibly required by other applications).
  """
  featureList: String

  """
      fileSize	Text 	Size of the application / package (e.g. 18MB). In the
  absence of a unit (MB, KB etc.), KB will be assumed.    installUrl	URL 	URL at
  which the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """
      memoryRequirements	Text  or URL 	Minimum memory requirements.
  operatingSystem	Text 	Operating systems supported (Windows 7, OSX 10.6,
  Android 1.6).    permissions	Text 	Permission(s) required to run the app (for
  example, a mobile app may require full internet access or may run only on
  wifi).    processorRequirements	Text 	Processor architecture required to run
  the application (e.g. IA64).    releaseNotes	Text  or URL 	Description of what
  changed in this version.
  """
  releaseNotes: String

  """
      screenshot	ImageObject  or URL 	A link to a screenshot image of the app.
  """
  screenshot: String

  """
      softwareAddOn	SoftwareApplication 	Additional content for a software
  application.    softwareHelp	CreativeWork 	Software application help.
  softwareRequirements	Text  or URL 	Component dependency requirements for
  application. This includes runtime environments and shared libraries that are
  not included in the application distribution package, but required to run the
  application (Examples: DirectX, Java or .NET runtime). Supersedes
  requirements.    softwareVersion	Text 	Version of the software instance.
  storageRequirements	Text  or URL 	Storage requirements (free space required).
    supportingData	DataFeed 	Supporting data for a SoftwareApplication.
  """
  softwareVersion: String
}

"""
零售店铺
"""
type Store implements Thing & Organization & Party {
  owns(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  hasNamespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  parentOrganization(first: Int, offset: Int): [Organization]
  subOrganizations(first: Int, offset: Int): [Organization]
  departments(first: Int, offset: Int): [Organization]
  hasPartyRoleName(
    filter: PartyRoleNameFilter
    order: PartyRoleNameOrder
    first: Int
    offset: Int
  ): [PartyRoleName]
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      【雇员】 组织的雇员.在组织承担角色的个人有时间限制
  """
  employees(
    filter: EmployeeRoleFilter
    order: EmployeeRoleOrder
    first: Int
    offset: Int
  ): [EmployeeRole]

  """
      【关注组织的人】 社交网络上本组织被别人关注
  """
  followers(
    filter: FollowerRoleFilter
    order: FollowerRoleOrder
    first: Int
    offset: Int
  ): [FollowerRole]

  """
      【会员】 组织或项目的成员,在组织承担角色的个人有时间限制
  """
  members(
    filter: MemberRoleFilter
    order: MemberRoleOrder
    first: Int
    offset: Int
  ): [MemberRole]

  """
      【创建日期】
  """
  dateCreated: DateTime

  """
      【更新日期】
  """
  dateModified: DateTime

  """
      【创建人】 该物体的创作者/作者。
  """
  creator(filter: UserFilter): User
}

input StoreFilter {
  name: StringHashFilter
  id: [ID!]
  and: StoreFilter
  or: StoreFilter
  not: StoreFilter
}

input StoreOrder {
  asc: StoreOrderable
  desc: StoreOrderable
  then: StoreOrder
}

enum StoreOrderable {
  identifier
  name
  alternateName
  description
  dateCreated
  dateModified
}

input StorePatch {
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]
  hasPartyRoleName: [PartyRoleNameRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  employees: [EmployeeRoleRef]
  followers: [FollowerRoleRef]
  members: [MemberRoleRef]

  """
      【创建日期】
  """
  dateCreated: DateTime

  """
      【更新日期】
  """
  dateModified: DateTime
  creator: UserRef
}

input StoreRef {
  id: ID
  owns: [OwnershipRef]
  hasNamespaces: [NamespaceRef!]
  hasPartyRoleName: [PartyRoleNameRef]
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String
  employees: [EmployeeRoleRef]
  followers: [FollowerRoleRef]
  members: [MemberRoleRef]

  """
      【创建日期】
  """
  dateCreated: DateTime

  """
      【更新日期】
  """
  dateModified: DateTime
  creator: UserRef
}

input StringExactFilter {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
}

input StringExactFilter_StringRegExpFilter {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  regexp: String
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

"""
A Thing with an ID，在KGIS平台内所有内容都是东西Thing,也就是资源Resource
"""
interface Thing {
  """
      资源对象所属的namespaces
  """
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]

  """
      【标识符】 标识符 The identifier property represents any kind of identifier for any
  kind of Thing, such as ISBNs, GTIN codes, UUIDs etc.
  """
  identifier: String

  """
      【名称】name    Text    The name of the item.
  """
  name: String!

  """
      【别名】 该项的别名。 An alias for the item.
  """
  alternateName: String

  """
  【描述】 该项的一个简单描述。 A description of the item.
  """
  description: String

  """
      The id of the thing.    The id: ID! in Thing means that an auto-generated
  ID by Dgraph will be used to identify things.
  """
  id: ID!
}

input ThingFilter {
  name: StringHashFilter
  id: [ID!]
  and: ThingFilter
  or: ThingFilter
  not: ThingFilter
}

input ThingOrder {
  asc: ThingOrderable
  desc: ThingOrderable
  then: ThingOrder
}

enum ThingOrderable {
  identifier
  name
  alternateName
  description
}

input ThingPatch {
  namespaces: [NamespaceRef!]

  """
      【标识符】 标识符 The identifier property represents any kind of identifier for any
  kind of Thing, such as ISBNs, GTIN codes, UUIDs etc.
  """
  identifier: String

  """
      【名称】name    Text    The name of the item.
  """
  name: String

  """
      【别名】 该项的别名。 An alias for the item.
  """
  alternateName: String

  """
  【描述】 该项的一个简单描述。 A description of the item.
  """
  description: String
}

input ThingRef {
  """
      The id of the thing.    The id: ID! in Thing means that an auto-generated
  ID by Dgraph will be used to identify things.
  """
  id: ID!
}

input UpdateConversationInput {
  filter: ConversationFilter!
  set: ConversationPatch
  remove: ConversationPatch
}

type UpdateConversationPayload {
  conversation(
    filter: ConversationFilter
    order: ConversationOrder
    first: Int
    offset: Int
  ): [Conversation]
  numUids: Int
}

input UpdateDataCatalogInput {
  filter: DataCatalogFilter!
  set: DataCatalogPatch
  remove: DataCatalogPatch
}

type UpdateDataCatalogPayload {
  datacatalog(
    filter: DataCatalogFilter
    order: DataCatalogOrder
    first: Int
    offset: Int
  ): [DataCatalog]
  numUids: Int
}

input UpdateEmployeeRoleInput {
  filter: EmployeeRoleFilter!
  set: EmployeeRolePatch
  remove: EmployeeRolePatch
}

type UpdateEmployeeRolePayload {
  employeerole(
    filter: EmployeeRoleFilter
    order: EmployeeRoleOrder
    first: Int
    offset: Int
  ): [EmployeeRole]
  numUids: Int
}

input UpdateEntryPointInput {
  filter: EntryPointFilter!
  set: EntryPointPatch
  remove: EntryPointPatch
}

type UpdateEntryPointPayload {
  entrypoint(
    filter: EntryPointFilter
    order: EntryPointOrder
    first: Int
    offset: Int
  ): [EntryPoint]
  numUids: Int
}

input UpdateFollowerRoleInput {
  filter: FollowerRoleFilter!
  set: FollowerRolePatch
  remove: FollowerRolePatch
}

type UpdateFollowerRolePayload {
  followerrole(
    filter: FollowerRoleFilter
    order: FollowerRoleOrder
    first: Int
    offset: Int
  ): [FollowerRole]
  numUids: Int
}

input UpdateGeneralOrganizationInput {
  filter: GeneralOrganizationFilter!
  set: GeneralOrganizationPatch
  remove: GeneralOrganizationPatch
}

type UpdateGeneralOrganizationPayload {
  generalorganization(
    filter: GeneralOrganizationFilter
    order: GeneralOrganizationOrder
    first: Int
    offset: Int
  ): [GeneralOrganization]
  numUids: Int
}

input UpdateMemberRoleInput {
  filter: MemberRoleFilter!
  set: MemberRolePatch
  remove: MemberRolePatch
}

type UpdateMemberRolePayload {
  memberrole(
    filter: MemberRoleFilter
    order: MemberRoleOrder
    first: Int
    offset: Int
  ): [MemberRole]
  numUids: Int
}

input UpdateMessageInput {
  filter: MessageFilter!
  set: MessagePatch
  remove: MessagePatch
}

type UpdateMessagePayload {
  message(
    filter: MessageFilter
    order: MessageOrder
    first: Int
    offset: Int
  ): [Message]
  numUids: Int
}

input UpdateNamespaceInput {
  filter: NamespaceFilter!
  set: NamespacePatch
  remove: NamespacePatch
}

type UpdateNamespacePayload {
  namespace(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace]
  numUids: Int
}

input UpdateOfferInput {
  filter: OfferFilter!
  set: OfferPatch
  remove: OfferPatch
}

type UpdateOfferPayload {
  offer(
    filter: OfferFilter
    order: OfferOrder
    first: Int
    offset: Int
  ): [Offer]
  numUids: Int
}

input UpdateOwnershipInput {
  filter: OwnershipFilter!
  set: OwnershipPatch
  remove: OwnershipPatch
}

type UpdateOwnershipPayload {
  ownership(
    filter: OwnershipFilter
    order: OwnershipOrder
    first: Int
    offset: Int
  ): [Ownership]
  numUids: Int
}

input UpdatePartyRoleNameInput {
  filter: PartyRoleNameFilter!
  set: PartyRoleNamePatch
  remove: PartyRoleNamePatch
}

type UpdatePartyRoleNamePayload {
  partyrolename(
    filter: PartyRoleNameFilter
    order: PartyRoleNameOrder
    first: Int
    offset: Int
  ): [PartyRoleName]
  numUids: Int
}

input UpdatePersonInput {
  filter: PersonFilter!
  set: PersonPatch
  remove: PersonPatch
}

type UpdatePersonPayload {
  person(
    filter: PersonFilter
    order: PersonOrder
    first: Int
    offset: Int
  ): [Person]
  numUids: Int
}

input UpdateProductInput {
  filter: ProductFilter!
  set: ProductPatch
  remove: ProductPatch
}

input UpdateProductModelInput {
  filter: ProductModelFilter!
  set: ProductModelPatch
  remove: ProductModelPatch
}

type UpdateProductModelPayload {
  productmodel(
    filter: ProductModelFilter
    order: ProductModelOrder
    first: Int
    offset: Int
  ): [ProductModel]
  numUids: Int
}

type UpdateProductPayload {
  product(
    filter: ProductFilter
    order: ProductOrder
    first: Int
    offset: Int
  ): [Product]
  numUids: Int
}

input UpdateReadNoteInput {
  filter: ReadNoteFilter!
  set: ReadNotePatch
  remove: ReadNotePatch
}

type UpdateReadNotePayload {
  readnote(
    filter: ReadNoteFilter
    order: ReadNoteOrder
    first: Int
    offset: Int
  ): [ReadNote]
  numUids: Int
}

input UpdateReviewInput {
  filter: ReviewFilter!
  set: ReviewPatch
  remove: ReviewPatch
}

type UpdateReviewPayload {
  review(
    filter: ReviewFilter
    order: ReviewOrder
    first: Int
    offset: Int
  ): [Review]
  numUids: Int
}

input UpdateSoftwareApplicationInput {
  filter: SoftwareApplicationFilter!
  set: SoftwareApplicationPatch
  remove: SoftwareApplicationPatch
}

type UpdateSoftwareApplicationPayload {
  softwareapplication(
    filter: SoftwareApplicationFilter
    order: SoftwareApplicationOrder
    first: Int
    offset: Int
  ): [SoftwareApplication]
  numUids: Int
}

input UpdateStoreInput {
  filter: StoreFilter!
  set: StorePatch
  remove: StorePatch
}

type UpdateStorePayload {
  store(
    filter: StoreFilter
    order: StoreOrder
    first: Int
    offset: Int
  ): [Store]
  numUids: Int
}

input UpdateThingInput {
  filter: ThingFilter!
  set: ThingPatch
  remove: ThingPatch
}

type UpdateThingPayload {
  thing(
    filter: ThingFilter
    order: ThingOrder
    first: Int
    offset: Int
  ): [Thing]
  numUids: Int
}

input UpdateUserInput {
  filter: UserFilter!
  set: UserPatch
  remove: UserPatch
}

type UpdateUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input UpdateWebhookInput {
  filter: WebhookFilter!
  set: WebhookPatch
  remove: WebhookPatch
}

type UpdateWebhookPayload {
  webhook(
    filter: WebhookFilter
    order: WebhookOrder
    first: Int
    offset: Int
  ): [Webhook]
  numUids: Int
}

"""
用户账号
"""
type User implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      The username used to login.    We also want to make sure that usernames are
  unique. The @id directive takes care of that - it also automatically adds hash
  searching, so we can drop the @search(by: [hash]), though having it also
  causes no harm.
  """
  username: String!

  """
      The password used to login.
  """
  password: String!

  """
      The user's public profile bio.
  """
  bio: String

  """
      用户账号对应的人，有账号一定有相关的Person，逆属性 Person.hasUser，参考Inverse property: hasPart
  """
  isUserOf(filter: PersonFilter): Person
}

input UserFilter {
  name: StringHashFilter
  id: [ID!]
  username: StringHashFilter
  and: UserFilter
  or: UserFilter
  not: UserFilter
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

enum UserOrderable {
  identifier
  name
  alternateName
  description
  username
  password
  bio
}

input UserPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      The password used to login.
  """
  password: String

  """
      The user's public profile bio.
  """
  bio: String
  isUserOf: PersonRef
}

input UserRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      The username used to login.    We also want to make sure that usernames are
  unique. The @id directive takes care of that - it also automatically adds hash
  searching, so we can drop the @search(by: [hash]), though having it also
  causes no harm.
  """
  username: String

  """
      The password used to login.
  """
  password: String

  """
      The user's public profile bio.
  """
  bio: String
  isUserOf: PersonRef
}

"""
网络钩子是“用户定义的HTTP回调”。[2]网络钩子通常被某些事件激活，比如将代码推送到源[3]或评论博客。[4]当此事件发生时，原网站将向为网络钩子配置的URL发送HTTP请求。用户可配置它们引发网页上的事件以调用另一个网站的行为。Webhooks allow external services to be notified when certain events happen.
"""
type Webhook implements Thing {
  namespaces(
    filter: NamespaceFilter
    order: NamespaceOrder
    first: Int
    offset: Int
  ): [Namespace!]
  identifier: String
  name: String!
  alternateName: String
  description: String
  id: ID!

  """
      回调url
  """
  payloadUrl: String

  """
      回调提交的数据内容类型如application/json
  """
  contentType: String

  """
      使用payloadUrl的安全token
  """
  secret: String

  """
      【作者】 该 CreativeWork 的创作者/作者。
  """
  creator(filter: UserFilter): User

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated	DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime

  """
       调用此webhook的客户端
  """
  client(filter: SoftwareApplicationFilter): SoftwareApplication
}

input WebhookFilter {
  name: StringHashFilter
  id: [ID!]
  and: WebhookFilter
  or: WebhookFilter
  not: WebhookFilter
}

input WebhookOrder {
  asc: WebhookOrderable
  desc: WebhookOrderable
  then: WebhookOrder
}

enum WebhookOrderable {
  identifier
  name
  alternateName
  description
  payloadUrl
  contentType
  secret
  dateCreated
}

input WebhookPatch {
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      回调url
  """
  payloadUrl: String

  """
      回调提交的数据内容类型如application/json
  """
  contentType: String

  """
      使用payloadUrl的安全token
  """
  secret: String
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated	DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  client: SoftwareApplicationRef
}

input WebhookRef {
  id: ID
  namespaces: [NamespaceRef!]
  identifier: String
  name: String
  alternateName: String
  description: String

  """
      回调url
  """
  payloadUrl: String

  """
      回调提交的数据内容类型如application/json
  """
  contentType: String

  """
      使用payloadUrl的安全token
  """
  secret: String
  creator: UserRef

  """
      【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created
  or the item was added to a DataFeed. dateCreated	DateTime or Date or
  DataFeedItem or CreativeWork
  """
  dateCreated: DateTime
  client: SoftwareApplicationRef
}
