plugins {
    id 'java'
    id "idea"
    id 'application'
    id "net.ltgt.apt" version "0.20"
//    id "io.github.kobylynskyi.graphql.codegen" version "1.3.0"
//    id "io.github.conanchen.graphql.codegen" version "1.3.0"
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.protobuf'
    id 'com.bmuschko.docker-remote-api' version '3.4.4'
    id 'org.jetbrains.kotlin.jvm' version '1.3.60'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
//import io.github.kobylynskyi.graphql.codegen.gradle.GraphqlCodegenGradleTask

dependencies {
    // protobuf project(':product-service-idl')
    // protobuf project(':inventory-service-idl')
    // implementation ('com.netifi:netifi-spring-boot-starter'){
    //             exclude group: 'ch.qos.logback'
    // }

    implementation "org.mapstruct:mapstruct:1.3.0.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"

    compileOnly "org.projectlombok:lombok:1.18.8"
    annotationProcessor "org.projectlombok:lombok:1.18.8"

    implementation ('org.springframework.boot:spring-boot-starter-web')
    implementation ('org.springframework.boot:spring-boot-starter-thymeleaf'){exclude group: 'ch.qos.logback'}
    compile ("org.springframework.boot:spring-boot-starter-data-mongodb"){exclude group: 'ch.qos.logback'}
    compile ("org.springframework.data:spring-data-commons"){exclude group: 'ch.qos.logback'}
    compile ("org.springframework.boot:spring-boot-starter-data-redis"){exclude group: 'ch.qos.logback'}
    compile 'com.github.kstyrc:embedded-redis'

    compile ("io.projectreactor:reactor-core"){exclude group: 'ch.qos.logback'}
    compile ("org.springframework.data:spring-data-redis"){exclude group: 'ch.qos.logback'}

    compile ("com.graphql-java-kickstart:graphql-spring-boot-starter"){exclude group: 'ch.qos.logback'}
    compile ('com.graphql-java-kickstart:altair-spring-boot-starter'){exclude group: 'ch.qos.logback'}
    compile ('com.graphql-java-kickstart:graphiql-spring-boot-starter'){exclude group: 'ch.qos.logback'}
    compile ('com.graphql-java-kickstart:voyager-spring-boot-starter') {exclude group: 'ch.qos.logback'}

    // testing facilities
    testCompile ('com.graphql-java-kickstart:graphql-spring-boot-starter-test'){exclude group: 'ch.qos.logback'}
    testCompile ('io.projectreactor:reactor-test'){exclude group: 'ch.qos.logback'}

    compile ('io.dgraph:dgraph4j'){exclude group: 'ch.qos.logback'}
    compile 'org.antlr:ST4'

    compile 'io.jsonwebtoken:jjwt-api'
    runtime 'io.jsonwebtoken:jjwt-impl', 'io.jsonwebtoken:jjwt-gson:0.11.1'

//    compile project (":kgis-datalake")
    implementation("com.bdlbsc:dgraph-graphql")

    // dev tools
    compile("org.springframework.boot:spring-boot-devtools")


    compile "io.github.graphql-java:graphql-java-annotations:8.0"

}

mainClassName = 'io.github.GapiApplication'


def task_graphql_enable = false;



// Packaging
task buildImage(type: DockerBuildImage, dependsOn: build) {
    buildArgs = ['JAR_FILE': "${bootJar.archiveName}"]
    dockerFile = file("${projectDir}/Dockerfile")
    inputDir = file("${projectDir}")
    tags = ["gregnetifi/kgmovies-${projectDir.name}", "gregnetifi/kgmovies-${projectDir.name}:${version}"]
}



protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc'
    }
    plugins {
        rsocketRpc {
            artifact = 'io.rsocket.rpc:rsocket-rpc-protobuf'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                rsocketRpc {}
            }
        }
    }
}


// Automatically generate GraphQL code on project build:
// compileJava.dependsOn 'graphqlCodegenBikeshop'
// compileJava.dependsOn 'graphqlCodegenBikeshop','graphqlCodegenMovie'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java',
            'build/generated/source/proto/main/java',
            'build/generated/source/proto/main/rsocketRpc',
            'build/generated/sources/annotationProcessor/java/main'
            ]
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test{
        java{
            srcDirs = ['src/main/java',
                       'src/test/java'
            ]
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}