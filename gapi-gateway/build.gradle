import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import io.github.kobylynskyi.graphql.codegen.gradle.GraphqlCodegenGradleTask

plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.protobuf'
    id 'com.bmuschko.docker-remote-api' version '3.4.4'
    id 'org.jetbrains.kotlin.jvm' version '1.3.60'
    id "io.github.kobylynskyi.graphql.codegen" version "1.3.0"
}

dependencies {
    protobuf project(':product-service-idl')
    protobuf project(':inventory-service-idl')

    implementation "org.mapstruct:mapstruct:1.3.0.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"

    compileOnly "org.projectlombok:lombok:1.18.8"
    annotationProcessor "org.projectlombok:lombok:1.18.8"

    implementation ('org.springframework.boot:spring-boot-starter-web'){
                exclude group: 'ch.qos.logback'
    }
    implementation ('org.springframework.boot:spring-boot-starter-thymeleaf'){
                exclude group: 'ch.qos.logback'
    }
    implementation ('com.netifi:netifi-spring-boot-starter'){
                exclude group: 'ch.qos.logback'
    }
    compile ("com.graphql-java-kickstart:graphql-java-tools:5.7.1"){
                exclude group: 'ch.qos.logback'
    }
    compile ("org.springframework.boot:spring-boot-starter-data-mongodb"){
                exclude group: 'ch.qos.logback'
    }
    compile ("org.springframework.data:spring-data-commons"){
                exclude group: 'ch.qos.logback'
    }

    compile ("com.graphql-java-kickstart:graphql-spring-boot-starter:6.0.1"){
                exclude group: 'ch.qos.logback'
    }
    // to embed Altair tool
    compile ('com.graphql-java-kickstart:altair-spring-boot-starter:6.0.1'){
                exclude group: 'ch.qos.logback'
    }
    // to embed GraphiQL tool
    compile ('com.graphql-java-kickstart:graphiql-spring-boot-starter:6.0.1'){
                exclude group: 'ch.qos.logback'
    }
    // to embed Voyager tool
    implementation ('com.graphql-java-kickstart:voyager-spring-boot-starter:6.0.1') {
                exclude group: 'ch.qos.logback'
    }
    
    // testing facilities
    testCompile ('com.graphql-java-kickstart:graphql-spring-boot-starter-test:6.0.1'){
                exclude group: 'ch.qos.logback'
    }

    compile ('io.dgraph:dgraph4j'){
                exclude group: 'ch.qos.logback'
    }
}

mainClassName = 'io.github.GraphqlApplication'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
// Packaging
task buildImage(type: DockerBuildImage, dependsOn: build) {
    buildArgs = ['JAR_FILE': "${bootJar.archiveName}"]
    dockerFile = file("${projectDir}/Dockerfile")
    inputDir = file("${projectDir}")
    tags = ["gregnetifi/kgmovies-${projectDir.name}", "gregnetifi/kgmovies-${projectDir.name}:${version}"]
}


task graphqlCodegenZommon(type: GraphqlCodegenGradleTask) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/zommon-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/zommon")
    modelPackageName = "io.github.conanchen.zommon.graphql.model"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
    modelNameSuffix = "GQO"
    generateApis = false
}

task graphqlCodegenBikeshop(type: GraphqlCodegenGradleTask,dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/bikeshop-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/bikeshop")
    apiPackageName = "io.github.kobylynskyi.bikeshop.graphql.api"
    modelPackageName = "io.github.kobylynskyi.bikeshop.graphql.model"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
    modelNameSuffix = "TO"
    generateApis = true
}

task graphqlCodegenMessage(type: GraphqlCodegenGradleTask,dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/message-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/message")
    apiPackageName = "io.github.conanchen.message.graphql.api"
    modelPackageName = "io.github.conanchen.message.graphql.model"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
    modelNameSuffix = "GQO"
    generateApis = true
}

task graphqlCodegenMovie(type: GraphqlCodegenGradleTask,dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/movies-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/movies")
    apiPackageName = "io.github.conanchen.movies.graphql.api"
    modelPackageName = "io.github.conanchen.movies.graphql.model"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
    modelNameSuffix = "GQO"
    generateApis = true
}

task graphqlCodegenShopping(type: GraphqlCodegenGradleTask,dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/shopping-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/shopping")
    apiPackageName = "io.github.conanchen.shopping.graphql.api"
    modelPackageName = "io.github.conanchen.shopping.graphql.model"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
    modelNameSuffix = "GQO"
    generateApis = true
}

task graphqlCodegenSoftwareApplication(type: GraphqlCodegenGradleTask,dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/softwareapplication-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/softwareapplication")
    apiPackageName = "io.github.conanchen.softwareapplication.graphql.api"
    modelPackageName = "io.github.conanchen.softwareapplication.graphql.model"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
    modelNameSuffix = "GQO"
    generateApis = true
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc'
    }
    plugins {
        rsocketRpc {
            artifact = 'io.rsocket.rpc:rsocket-rpc-protobuf'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                rsocketRpc {}
            }
        }
    }
}


// Automatically generate GraphQL code on project build:
// compileJava.dependsOn 'graphqlCodegenBikeshop'
// compileJava.dependsOn 'graphqlCodegenBikeshop','graphqlCodegenMovie'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java',
            'build/generated/source/proto/main/java',
            'build/generated/source/proto/main/rsocketRpc',
            'build/generated/sources/annotationProcessor/java/main'
            ]
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}