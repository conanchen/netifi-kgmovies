extend type Query {
    allConversations(after: String, first: Int, before: String, last: Int): ConversationsConnection
    conversation(id: ID, csID: ID): Conversation
    message(id: ID, msgID: ID): Message
    messageSendAction(id: ID, msgID: ID): MessageSendAction
    messageCommentAction(id: ID, msgID: ID): MessageCommentAction
    conversationCreateAction(id: ID, msgID: ID): ConversationCreateAction
    conversationJoinRequestAction(id: ID, msgID: ID): ConversationJoinRequestAction
    conversationJoinApproveAction(id: ID, msgID: ID): ConversationJoinApproveAction
    conversationInvitationRequestAction(id: ID, msgID: ID): ConversationInvitationRequestAction
    conversationInvitationAcceptAction(id: ID, msgID: ID): ConversationInvitationAcceptAction
    conversationMemberRemoveAction(id: ID, msgID: ID): ConversationMemberRemoveAction
    conversationWebhookCreateAction(id: ID, msgID: ID): ConversationWebhookCreateAction
}

extend type Mutation {

    """创建会话，受限于是否在所在会话中拥有【ConversationCreateAction】. create a conversation."""
    conversationCreate(input: ConversationCreateInput!): ConversationPayload

    """申请加入会话，受限于是否在所在会话中拥有【ConversationJoinRequestAction】.request to join a conversation."""
    conversationJoinRequest(input: ConversationJoinRequestInput!): ConversationPayload

    """批准加入会话，受限于是否在所在会话中拥有【ConversationJoinApproveAction】.approve to join a conversation."""
    conversationJoinApprove(input: ConversationJoinApproveInput!): ConversationPayload

    """发送邀请加入会话，受限于是否在所在会话中拥有【ConversationInvitationRequestAction】.send invitation to join a conversation."""
    conversationInvitationRequest(input: ConversationInvitationRequestInput!): ConversationPayload

    """接受邀请加入会话，accept invitation to join a conversation."""
    conversationInvitationAccept(input: ConversationInvitationAcceptInput!): ConversationPayload

    """踢出会话成员，受限于是否在所在会话中拥有【ConversationMemberRemoveAction】. remove members from a conversation."""
    conversationMemberRemove(input: ConversationMemberRemoveInput!): ConversationPayload

    """会话本身的webhook，以便第三方应用向会话发送消息通知，受限于是否在所在会话中拥有【ConversationWebhookCreateAction】. webhook of the conversation."""
    conversationWebhookCreate(input: ConversationWebhookCreateInput!): ConversationPayload

    """向会话发送消息，受限于是否在所在会话中拥有【MessageSendAction】. Sends a message to a conversation."""
    messgeSend(conversationId: String, input: MessageSendInput!): MessagePayload

    """撤回消息，受限于是否对该消息拥有【MessageWithdrawAction】.withdraw  a message."""
    messgeWithdraw(messageId: String): MessagePayload

    """消息补充备注，受限于是否对该消息拥有【MessageCommentAction】.post a comment to a message."""
    messgeComment(messageId: String, input: MessageCommentInput!): MessagePayload

    """消息备注修改，受限于是否对该消息拥有【MessageEditAction】.edit a comment to a message."""
    messgeCommentUpdate(messageId: String, input: MessageCommentInput!): MessagePayload

    """消息备注删除，受限于是否对该消息拥有【MessageAction】.delete a comment to a message."""
    messgeCommentDelete(messageId: String, input: MessageCommentInput!): MessagePayload
}



"""Canonical URL: http://cnschema.org/DataCatalog
【数据目录】数据集的目录 A collection of datasets."""
type DataCatalog implements Node{
    """【名称】 条目的名称 The name of the item."""
    name: String!

    """【所在父数据集目录】所在的父数据集目录 A data catalog which contains this dataset."""
    parentDataCatalog: DataCatalog

    """【包含子数据集目录】包含子的数据集目录"""
    subDataCatalogs: [DataCatalog]

    """【作者】 该 CreativeWork 的创作者/作者。跟CreativeWork的Author属性一样。 The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.creator    Organization or Person or CreativeWork or UserComments    """
    creator: Person

    """【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or the item was added to a DataFeed. dateCreated    DateTime or Date or DataFeedItem or CreativeWork"""
    dateCreated: DateTime

    """Organization or Person or FollowAction
    【被关注】 社交网络上被别人关注 A sub property of object. The person or organization being followed."""
    followees:    [Person]

    """The id of the object."""
    id: ID!
}

"""【对话】组织之间或特定主题的人员之间的一个或多个消息。 可以使用isPartOf或hasPart属性将个人消息链接到会话。 One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties."""
type Conversation implements Node{

    """【关于】 事物的关于信息 The subject matter of the content."""
    about: Thing

    """【负责人】 对CreativeWork负有法律责任的特定的人。 Specifies the Person that is legally accountable for the CreativeWork."""
    accountablePerson: Person

    """【文章标题】 文章标题 Headline of the article."""
    headline: String

    """【副标题】 CreativeWork的副标题。 A secondary title of the CreativeWork."""
    alternativeHeadline: String

    """【描述】 该项的一个简单描述。 A description of the item. description    Text or Thing    """
    description: String

    """【作者】 该 CreativeWork 的创作者/作者。跟CreativeWork的Author属性一样。 The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.creator    Organization or Person or CreativeWork or UserComments    """
    creator: Person

    """【创建日期】 创作出CreativeWork的日期。 The date on which the CreativeWork was created or the item was added to a DataFeed. dateCreated    DateTime or Date or DataFeedItem or CreativeWork"""
    dateCreated: DateTime

    """【所在数据集目录】所在的数据集目录 A data catalog which contains this dataset."""
    includedInDataCatalog: DataCatalog

    """参照 hasPart【作品组件】 表示某个作品是该作品的一部分 """
    hasParts: [Message]

    """本会话Conversation给第三方软件如Github、阿里云代码创建的webhook，第三方软件向本会话推送事件消息"""
    webhook: [Webhook]

    """[Potential Action:There is an action status for potential actions, if you want to markup actions that have not occurred yet but are possible. potentialAction is defined by schema.org as “an idealized action in which this thing would play an 'object' role”](https://ondyr.com/what-is-action-schema/)"""
    potentialActions: [Action]

    """The id of the object."""
    id: ID!
}

"""A connection to a list of items."""
type ConversationsConnection {
    """Information to aid in pagination."""
    pageInfo: PageInfo!

    """A list of edges."""
    edges: [ConversationsEdge]

    """
    A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
    """
    totalCount: Int

    """
    A list of all of the objects returned in the connection. This is a convenience
    field provided for quickly exploring the API; rather than querying for
    "{ edges { node } }" when no edge data is needed, this field can be be used
    instead. Note that when clients like Relay need to fetch the "cursor" field on
    the edge to enable efficient pagination, this shortcut cannot be used, and the
    full "{ edges { node } }" version should be used instead.
    """
    items: [Conversation]
}

"""An edge in a connection."""
type ConversationsEdge {
    """The item at the end of the edge"""
    node: Conversation

    """A cursor for use in pagination"""
    cursor: String!
}

"""【消息】由发送者发给一个或多个组织或个人的信息 A single message from a sender to one or more organizations or people."""
type Message implements Node{

    """isPartOf【从属于】 是它的一部分 Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of."""
    isPartOf: [Conversation]

    """【发送者】 参与者的子属性。例如邮件的发送者。 A sub property of participant. The participant who is at the sending end of the action."""
    sender: Person!
    """【发送日期】 消息被发送的日期/时间。 The date/time at which the message was sent."""
    dateSent: DateTime

    """【收件人】 消息的直接收件人 A sub property of recipient. The recipient who was directly sent the message."""
    toRecipient: Person

    """【阅读日期】 如果存在单个的收件人，就是消息被收件人读取的日期/时间。 The date/time at which the message has been read by the recipient if a single recipient exists."""
    dateRead: DateTime

    """【接收日期】 如果存在单个的收件人，就是消息被收件人接收的日期/时间。 The date/time the message was received if a single recipient exists."""
    dateReceived: DateTime

    """【接收者】 参与者的子属性。 在行动接收端的参与者。 A sub property of participant. The participant who is at the receiving end of the action."""
    recipient: [Person]

    """【文本】 作品的文字内容 The textual content of this CreativeWork."""
    text: String!

    """【评论】 评论，一般是用户对CreativeWork的评论。 Comments, typically from users."""
    comments: [Comment]

    """[Potential Action:There is an action status for potential actions, if you want to markup actions that have not occurred yet but are possible. potentialAction is defined by schema.org as “an idealized action in which this thing would play an 'object' role”](https://ondyr.com/what-is-action-schema/)"""
    potentialActions: [Action]

    """The id of the object."""
    id: ID!
}

"""Comment
Canonical URL: http://cnschema.org/Comment
Thing > CreativeWork > Comment
【评论】对项目的评论 - 例如对博客文章的评论。 该评论的内容是通过text属性表示的，其主题通过about，与所有CreativeWorks共享的属性来表达 A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the text property, and its topic via about, properties shared with all CreativeWorks."""
type Comment implements Node{
    """【上级条目】 一个问题、答案或条目的父条目 The parent of a question, answer or item in general."""
    parentItem: Message

    """【作者】 此内容或评分的作者。"""
    author:    Person

    """【文本】 作品的文字内容 The textual content of this CreativeWork."""
    text: String!

    """【创建日期】 创作出CreativeWork的日期。 """
    dateCreated: DateTime

    """The id of the object."""
    id: ID!
}


input MessageSendInput {
    actionId: ID!
}
input MessageCommentInput {
    actionId: ID!
}
input ConversationCreateInput {
    actionId: ID!
}
input ConversationJoinRequestInput {
    actionId: ID!
}
input ConversationJoinApproveInput {
    actionId: ID!
}
input ConversationInvitationRequestInput {
    actionId: ID!
}
input ConversationInvitationAcceptInput {
    actionId: ID!
}
input ConversationMemberRemoveInput {
    actionId: ID!
}

input ConversationWebhookCreateInput {
    actionId: ID!
}



"""Conversation mutation api response payload"""
type ConversationPayload{
    """The conversation object ."""
    conversation: Conversation

    """所执行的操作Action"""
    action: Action

    """List of errors that occurred executing the mutation."""
    conversationErrors: [ConversationError!]!
}

"""Represents an error that happens during execution of a conversation mutation."""
type  ConversationError implements DisplayableError{

    """Error code to uniquely identify the error."""
    code: ConversationErrorCode

    """Path to the input field which caused the error."""
    field: [String!]

    """The error conversation."""
    message: String!

}

"""Possible error codes that could be returned by a conversation mutation."""
enum ConversationErrorCode{
    """Input value is blank."""
    BLANK

    """Input value is invalid."""
    INVALID

    """Input value is too long."""
    TOO_LONG

    """不允许执行该操作Action"""
    ACTION_NOT_PERMITTED
}


"""Message mutation api response payload"""
type MessagePayload{
    """The message object ."""
    message: Message

    """所执行的操作Action"""
    action: Action

    """List of errors that occurred executing the mutation."""
    messageErrors: [MessageError!]!
}

"""Represents an error that happens during execution of a message mutation."""
type  MessageError implements DisplayableError{

    """Error code to uniquely identify the error."""
    code: MessageErrorCode

    """Path to the input field which caused the error."""
    field: [String!]

    """The error message."""
    message: String!

}

"""Possible error codes that could be returned by a message mutation."""
enum MessageErrorCode{
    """Input value is blank."""
    BLANK

    """Input value is invalid."""
    INVALID

    """Input value is too long."""
    TOO_LONG

    """不允许执行该操作Action"""
    ACTION_NOT_PERMITTED
}


type MessageSendAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
    }

type MessageCommentAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
}

type ConversationCreateAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
    }

type ConversationJoinRequestAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
    }

type ConversationJoinApproveAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
}

type ConversationInvitationRequestAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
}

type ConversationInvitationAcceptAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
}

type ConversationMemberRemoveAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
}


type ConversationWebhookCreateAction implements Action & Node{
    """【行为的发起者】 发起作用（或产生某种结果）的人或物person or organization performing the action"""
    agent: [Person]

    """【参与者】 间接参与行动的其他人。 例如 约翰与史蒂夫写了一本书 Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve."""
    participant: [Person]

    """【行动操作的对象】 动作在其上执行的对象，其状态保持完整或更改 The object upon which the action is carried out, whose state is kept intact or changed."""
    object: Thing

    """【目标】 表示行动的目标入口点 Indicates a target EntryPoint for an Action."""
    target:	EntryPoint

    """【开始时刻】 某事的预期开始时间。对于跨越一段时间的动作。例如，约翰从１月到１２月写了一本书。"""
    startTime: DateTime

    """【结束时刻】 事件的结束时间 The endTime of something. """
    endTime: DateTime

    """location of action"""
    location: Place

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """The id of the object."""
    id: ID!
}

