extend type Query {
  allBrand(after: String, first: Int, before: String, last: Int): BrandConnection
  brand(id: ID, brandID: ID): Brand
}


"""https://schema.org/Brand A brand is a name used by an organization or business person for labeling a product, product group, or similar."""
type Brand implements Thing & Node{
    """name	Text 	The name of the item."""
    name: String

    """alternateName	Text 	An alias for the item."""
    alternateName: String

    """description	Text 	A description of the item."""
    description: String

    """aggregateReview	AggregateReview 	The overall rating, based on a collection of reviews or ratings, of the item."""
    aggregateReview: AggregateReview

    """logo	ImageObject  or URL 	An associated logo."""
    logo: String

    """slogan	Text 	A slogan or motto associated with the item."""
    slogan: String

    """The id of the object."""
    id: ID!
}

"""A connection to a list of items."""
type BrandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BrandEdge]

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """
  A list of all of the objects returned in the connection. This is a convenience
  field provided for quickly exploring the API; rather than querying for
  "{ edges { node } }" when no edge data is needed, this field can be be used
  instead. Note that when clients like Relay need to fetch the "cursor" field on
  the edge to enable efficient pagination, this shortcut cannot be used, and the
  full "{ edges { node } }" version should be used instead.
  """
  films: [Brand]
}

"""An edge in a connection."""
type BrandEdge {
  """The item at the end of the edge"""
  node: Brand

  """A cursor for use in pagination"""
  cursor: String!
}
