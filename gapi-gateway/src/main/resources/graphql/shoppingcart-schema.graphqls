extend type Query {
    """https://api.cartql.com/ Use this to get a cart by a custom ID. If a cart doesn't exist with this ID, it will be created for you."""
    cart(id: ID! currency: CurrencyInput): Cart
    order(id: ID, orderID: ID): Order
    checkout(id: ID, checkoutID: ID): Checkout
    postalAddress(id: ID, paID: ID): PostalAddress
}

extend type Mutation {

    """购物车添加条目或条目存在则增加数量Use this to add items to the cart. If the item already exists, the provided input will be merged and quantity will be increased."""
    cartAddItem(input: AddToCartInput!): CartPayload!

    """购物车设置条目Use this to set all the items at once in the cart. This will override any existing items."""
    cartSetItems(input: SetCartItemsInput!): CartPayload!

    """购物车修改条目Use this to update any existing items in the cart. If the item doesn't exist, it'll return an error."""
    cartUpdateItem(input: UpdateCartItemInput!): CartPayload!

    """购物车增加数量Use this to increase the item quantity of the provided item ID. If the item doesn't exist, it'll throw an error."""
    cartIncrementItemQuantity(input: UpdateItemQuantityInput!): CartPayload!

    """购物车减少数量Use this to decrease the item quantity of the provided item ID. If the item doesn't exist, it'll throw an error."""
    cartDecrementItemQuantity(input: UpdateItemQuantityInput!): CartPayload!

    """购物车移除条目Use this to remove any items from the cart. If it doesn't exist, it'll throw an error."""
    cartRemoveItem(input: RemoveCartItemInput!): CartPayload!

    """购物车清空Use this to empty the cart. If the cart doesn't exist, it'll throw an error."""
    cartEmpty(input: EmptyCartInput!): CartPayload!

    """结算单创建https://shopify.dev/graphiql/storefront-graphiql Creates a new checkout."""
    checkoutCreate(input: CheckoutCreateInput!): CheckoutPayload

    """结算单拼单创建https://shopify.dev/graphiql/storefront-graphiql Creates a new checkout with other customer's order."""
    checkoutCreatePlusOrder(input: CheckoutCreatePlusOrderInput!): CheckoutPayload

    """结算单折扣券加入Applies a discount to an existing checkout using a discount code."""
    checkoutDiscountCodeApply(discountCode: String!checkoutId: ID!): CheckoutPayload

    """结算单折扣券移除Removes the applied discount from an existing checkout."""
    checkoutDiscountCodeRemove(checkoutId: ID!): CheckoutPayload

    """结算单送货地址Updates the shipping address of an existing checkout."""
    checkoutShippingAddressUpdate(shippingAddress: PostalAddressInput!checkoutId: ID!): CheckoutPayload

    """结算单电子邮件Updates the email on an existing checkout."""
    checkoutEmailUpdate(checkoutId: ID!email: String!): CheckoutPayload

    """结算单手机号Updates the mobile phone on an existing checkout."""
    checkoutPhoneUpdate(checkoutId: ID!email: String!): CheckoutPayload

    """结算单其他属性Updates the attributes of a checkout."""
    checkoutAttributesUpdate(checkoutId: ID!input: CheckoutAttributesUpdateInput!): CheckoutPayload

    """结算单顾客关联Associates a customer to the checkout.如当服务员替顾客下单时设置结算单的顾客,默认顾客是自己"""
    checkoutCustomerAssociate(checkoutId: ID!customerAccessToken: String!): CheckoutPayload

    """结算单顾客取消Disassociates the current checkout customer from the checkout.如当服务员替顾客下单时设置结算单的顾客,默认顾客是自己"""
    checkoutCustomerDisassociate(checkoutId: ID!): CheckoutPayload

    """结算单结束，请求顾客（或自己）审批确认，例如服务员在自己手机填写完结算单请求老人顾客审批确认，结算单将发送到老人顾客手机app上或者验证码发送到手机上"""
    checkoutCompleteRequest(input: CheckoutCompleteRequestInput!): CheckoutCompletePayload

    """结算单结束，顾客（或自己）审批确认或者服务员输入顾客验证码确认"""
    checkoutCompleteApprove(input: CheckoutCompleteApproveInput!): CheckoutCompletePayload

    """支付：使用信用卡付款结算单，Before you can complete payment using paymentCompleteCheckoutWithCreditCard, you need to [request payment processing](https://shopify.dev/tutorials/build-a-sales-channel#request-payment-processing)."""
    paymentCompleteCheckoutWithCreditCard(input: CreditCardPaymentInput!): PaymentCompletePayload

    """支付：使用微信支付 付款结算单，Before you can complete payment using paymentCompleteCheckoutWithWeixinPaymentStep1, you need to [request payment processing](https://shopify.dev/tutorials/build-a-sales-channel#request-payment-processing)."""
    paymentCompleteCheckoutWithWeixinPaymentStep1(input: WeixinPaymentStep1Input!): PaymentCompletePayload
    """支付：使用微信支付 付款结算单，Before you can complete payment using paymentCompleteCheckoutWithWeixinPaymentStep2, you need to [request payment processing](https://shopify.dev/tutorials/build-a-sales-channel#request-payment-processing)."""
    paymentCompleteCheckoutWithWeixinPaymentStep2(input: WeixinPaymentStep2Input!): PaymentCompletePayload

    """支付：使用支付宝支付 付款结算单，Before you can complete payment using paymentCompleteCheckoutWithAlipayPaymentStep1, you need to [request payment processing](https://shopify.dev/tutorials/build-a-sales-channel#request-payment-processing)."""
    paymentCompleteCheckoutWithAlipayPaymentStep1(input: AlipayPaymentStep1Input!): PaymentCompletePayload
    """支付：使用支付宝支付 付款结算单，Before you can complete payment using paymentCompleteCheckoutWithAlipayPaymentStep2, you need to [request payment processing](https://shopify.dev/tutorials/build-a-sales-channel#request-payment-processing)."""
    paymentCompleteCheckoutWithAlipayPaymentStep2(input: AlipayPaymentStep2Input!): PaymentCompletePayload

    """支付：使用代币付款结算单，Before you can complete payment using paymentCompleteCheckoutWithTokenizedPayment, you need to [request payment processing](https://shopify.dev/tutorials/build-a-sales-channel#request-payment-processing)."""
    paymentCompleteCheckoutWithTokenizedPayment(input: TokenizedPaymentInput!): PaymentCompletePayload

}


input PostalAddressInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    """【名称】 条目的名称 The name of the item."""
    name: String!

    """【别名】 该项的别名。 An alias for the item."""
    alternateName: String

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """addressCountry    Country  or Text    The country. For example, USA. You can also provide the two-letter ISO 3166-1 alpha-2 country code."""
    addressCountry: String

    """addressRegion    Text    The region in which the locality is, and which is in the country. For example, California or another appropriate first-level Administrative division"""
    addressRegion: String

    """addressLocality    Text    The locality in which the street address is, and which is in the region. For example, Mountain View."""
    addressLocality: String

    """streetAddress line1    Text    The street address. For example, 1600 Amphitheatre Pkwy."""
    streetAddress1: String

    """streetAddress line2    Text    The street address. For example, 1600 Amphitheatre Pkwy."""
    streetAddress2: String

    """postOfficeBoxNumber    Text    The post office box number for PO box addresses."""
    postOfficeBoxNumber: String

    """postalCode    Text    The postal code. For example, 94043."""
    postalCode: String
}


"""https://schema.org/PostalAddress The mailing address."""
type PostalAddress implements Node{
    """【名称】 条目的名称 The name of the item."""
    name: String!

    """【别名】 该项的别名。 An alias for the item."""
    alternateName: String

    """【描述】 该项的一个简单描述。 A description of the item."""
    description: String

    """addressCountry    Country  or Text    The country. For example, USA. You can also provide the two-letter ISO 3166-1 alpha-2 country code."""
    addressCountry: String

    """addressRegion    Text    The region in which the locality is, and which is in the country. For example, California or another appropriate first-level Administrative division"""
    addressRegion: String

    """addressLocality    Text    The locality in which the street address is, and which is in the region. For example, Mountain View."""
    addressLocality: String

    """streetAddress line1    Text    The street address. For example, 1600 Amphitheatre Pkwy."""
    streetAddress1: String

    """streetAddress line2    Text    The street address. For example, 1600 Amphitheatre Pkwy."""
    streetAddress2: String

    """postOfficeBoxNumber    Text    The post office box number for PO box addresses."""
    postOfficeBoxNumber: String

    """postalCode    Text    The postal code. For example, 94043."""
    postalCode: String

    """The id of the object."""
    id: ID!

}


input AddToCartInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    cartId: ID!
    id: ID!
    name: String
    description: String
    type: CartItemType = SKU
    images: [String]
    price: Int!
    currency: CurrencyInput
    quantity: Int = 1
    attributes: [CustomAttributeInput]
}

type Cart {
    id: ID!
    currency: Currency!
    email: String
    totalItems: Int
    totalUniqueItems: Int
    items: [CartItem!]!
    subTotal: Money!
    shippingTotal: Money!
    taxTotal: Money!
    grandTotal: Money!
    isEmpty: Boolean
    abandoned: Boolean
    attributes: [CustomAttribute!]!
    notes: String
    createdAt: DateTime!
    updatedAt: DateTime!
}

type CartItem {
    id: ID!
    name: String
    description: String
    type: CartItemType!
    images: [String]
    unitTotal: Money!
    lineTotal: Money!
    quantity: Int!
    attributes: [CustomAttribute!]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

enum CartItemType {
    SKU
    TAX
    SHIPPING
}

input CheckoutInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    cartId: ID!
    email: String
    shipping: PostalAddressInput!
    billing: PostalAddressInput
}

type Currency {
    code: CurrencyCode
    symbol: String
    thousandsSeparator: String
    decimalSeparator: String
    decimalDigits: Int
}



input CurrencyInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    code: CurrencyCode
    symbol: String
    thousandsSeparator: String
    decimalSeparator: String
    decimalDigits: Int
}

input EmptyCartInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input CheckoutCreateInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input CheckoutCreatePlusOrderInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}

input CheckoutAttributesUpdateInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input CheckoutCompleteRequestInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input CheckoutCompleteApproveInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input CreditCardPaymentInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input WeixinPaymentStep1Input {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input WeixinPaymentStep2Input {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input AlipayPaymentStep1Input {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input AlipayPaymentStep2Input {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}
input TokenizedPaymentInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
}


input RemoveCartItemInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    cartId: ID!
    id: ID!
}

input SetCartItemInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    id: ID!
    name: String
    description: String
    type: CartItemType = SKU
    images: [String]
    price: Int!
    currency: CurrencyInput
    quantity: Int = 1
    attributes: [CustomAttributeInput]
}

input SetCartItemsInput {
    cartId: ID!
    items: [SetCartItemInput!]!
}

input UpdateCartItemInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    cartId: ID!
    id: ID!
    name: String
    description: String
    type: CartItemType
    images: [String]
    price: Int
    quantity: Int
}

input UpdateItemQuantityInput {
    """
    客户端变更请求的唯一标识，A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    cartId: ID!
    id: ID!
    by: Int!
}


"""Cart mutation api response payload"""
type CartPayload{
    """The cart object ."""
    cart: Cart

    """List of errors that occurred executing the mutation."""
    cartErrors: [CartError!]!
}

"""Represents an error that happens during execution of a cart mutation."""
type  CartError implements DisplayableError{

    """Error code to uniquely identify the error."""
    code: CartErrorCode

    """Path to the input field which caused the error."""
    field: [String!]

    """The error message."""
    message: String!

}

"""Possible error codes that could be returned by a cart mutation."""
enum CartErrorCode{
    """Input value is blank."""
    BLANK

    """Input value is invalid."""
    INVALID

    """Input value is too long."""
    TOO_LONG
}
type AppliedGiftCard{
    id: ID
}
type AvailableShippingRates{
    id: ID
}
"""Checkout:A container for all the information required to checkout items and pay."""
type Checkout implements Node{
    """The gift cards used on the checkout."""
    appliedGiftCards: [AppliedGiftCard!]!

    """The available shipping rates for this Checkout. Should only be used when checkout requiresShipping is true and the shipping address is valid."""
    availableShippingRates: AvailableShippingRates

    """The date and time when the checkout was completed."""
    completedAt: DateTime

    """The date and time when the checkout was created."""
    createdAt: DateTime!

    """The currency code for the Checkout."""
    currencyCode: CurrencyCode!

    """A list of extra information that is added to the checkout."""
    customAttributes: [CustomAttribute!]!

    """Discounts that have been applied on the checkout."""
    discountApplications(first: Int after: String last: Int before: String reverse: Boolean = false): DiscountApplicationConnection!

    """The email attached to this checkout."""
    email: String

    """A list of line item objects, each one containing information about an item in the checkout."""
    lineItems(first: Int after: String last: Int before: String reverse: Boolean = false): CheckoutLineItemConnection!

    """The sum of all the prices of all the items in the checkout. Taxes, shipping and discounts excluded."""
    lineItemsSubtotalPrice: Money!

    """The note associated with the checkout."""
    note: String

    """The resulting order from a paid checkout."""
    order: Order

    """The Order Status Page for this Checkout, null when checkout is not completed."""
    orderStatusUrl: URL

    """The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards."""
    paymentDueV2: Money!

    """Whether or not the Checkout is ready and can be completed. Checkouts may have asynchronous operations that can take time to finish. If you want to complete a checkout or ensure all the fields are populated and up to date, polling is required until the value is true."""
    ready: Boolean!

    """States whether or not the fulfillment requires shipping."""
    requiresShipping: Boolean!

    """The shipping address to where the line items will be shipped."""
    shippingAddress: PostalAddress

    """The discounts that have been allocated onto the shipping line by discount applications."""
    shippingDiscountAllocations: [DiscountAllocation!]!

    """Once a shipping rate is selected by the customer it is transitioned to a shipping_line object."""
    shippingLine: ShippingRate

    """Price of the checkout before shipping and taxes."""
    subtotalPriceV2: Money!

    """Specifies if the Checkout is tax exempt."""
    taxExempt: Boolean!

    """Specifies if taxes are included in the line item and shipping line prices."""
    taxesIncluded: Boolean!

    """The sum of all the prices of all the items in the checkout, taxes and discounts included."""
    totalPriceV2: Money!

    """The sum of all the taxes applied to the line items and shipping lines in the checkout."""
    totalTaxV2: Money!

    """The date and time when the checkout was last updated."""
    updatedAt: DateTime!

    """The url pointing to the checkout accessible from the web."""
    webUrl: URL!

    """The id of the object. Globally unique identifier."""
    id: ID!

}

"""A connection to a list of items."""
type CheckoutLineItemConnection {
    """Information to aid in pagination."""
    pageInfo: PageInfo!

    """A list of edges."""
    edges: [CheckoutLineItemEdge]

    """
    A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
    """
    totalCount: Int

    """
    A list of all of the objects returned in the connection. This is a convenience
    field provided for quickly exploring the API; rather than querying for
    "{ edges { node } }" when no edge data is needed, this field can be be used
    instead. Note that when clients like Relay need to fetch the "cursor" field on
    the edge to enable efficient pagination, this shortcut cannot be used, and the
    full "{ edges { node } }" version should be used instead.
    """
    films: [CheckoutLineItem]
}

"""An edge in a connection."""
type CheckoutLineItemEdge {
    """The item at the end of the edge"""
    node: CheckoutLineItem

    """A cursor for use in pagination"""
    cursor: String!
}


"""A single line item in the checkout, grouped by variant and attributes."""
type CheckoutLineItem implements Node{
    """Extra information in the form of an array of Key-Value pairs about the line item."""
    customAttributes: [CustomAttribute!]!

    """The discounts that have been allocated onto the checkout line item by discount applications."""
    discountAllocations: [DiscountAllocation!]!

    """The quantity of the line item."""
    quantity: Int!

    """Title of the line item. Defaults to the product's title."""
    title: String!

    """Product variant of the line item."""
    variant: OrderableThing

    """The id of the object. Globally unique identifier."""
    id: ID!

}

"""An amount discounting the line that has been allocated by a discount."""
type DiscountAllocation implements Node{
    """Amount of discount allocated."""
    allocatedAmount: Money!

    """The discount this allocated amount originated from."""
    discountApplication: DiscountApplication!

    """The id of the object. Globally unique identifier."""
    id: ID!

}

"""A connection to a list of items."""
type DiscountApplicationConnection {
    """Information to aid in pagination."""
    pageInfo: PageInfo!

    """A list of edges."""
    edges: [DiscountApplicationEdge]

    """
    A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
    """
    totalCount: Int

    """
    A list of all of the objects returned in the connection. This is a convenience
    field provided for quickly exploring the API; rather than querying for
    "{ edges { node } }" when no edge data is needed, this field can be be used
    instead. Note that when clients like Relay need to fetch the "cursor" field on
    the edge to enable efficient pagination, this shortcut cannot be used, and the
    full "{ edges { node } }" version should be used instead.
    """
    films: [DiscountApplication]
}

"""An edge in a connection."""
type DiscountApplicationEdge {
    """The item at the end of the edge"""
    node: DiscountApplication

    """A cursor for use in pagination"""
    cursor: String!
}

type DiscountApplication implements Node{

    """The id of the object. Globally unique identifier."""
    id: ID!

}

"""Checkout mutation api response payload"""
type CheckoutPayload{
    """The checkout object ."""
    checkout: Checkout

    """List of errors that occurred executing the mutation."""
    checkoutErrors: [CheckoutError!]!
}

"""Checkout complete mutation api response payload"""
type CheckoutCompletePayload{
    """The order object ."""
    order: Order

    """List of errors that occurred executing the mutation."""
    checkoutErrors: [CheckoutError!]!
}

"""Payment complete mutation api response payload"""
type PaymentCompletePayload{
    """The order object ."""
    order: Order

    """List of errors that occurred executing the mutation."""
    paymentErrors: [PaymentError!]!
}


"""Represents an error in the input of a mutation."""
interface DisplayableError{
    """Path to the input field which caused the error."""
    field: [String!]

    """The error message."""
    message: String!
}

"""Represents an error that happens during execution of a checkout mutation."""
type  CheckoutError implements DisplayableError{

    """Error code to uniquely identify the error."""
    code: CheckoutErrorCode

    """Path to the input field which caused the error."""
    field: [String!]

    """The error message."""
    message: String!
}

"""Represents an error that happens during execution of a payment mutation."""
type  PaymentError implements DisplayableError{

    """Error code to uniquely identify the error."""
    code: PaymentErrorCode

    """Path to the input field which caused the error."""
    field: [String!]

    """The error message."""
    message: String!
}

"""Possible error codes that could be returned by a checkout mutation."""
enum CheckoutErrorCode{
    """Input value is blank."""
    BLANK

    """Input value is invalid."""
    INVALID

    """Input value is too long."""
    TOO_LONG

    """Input value is not present."""
    PRESENT

    """Input value should be less than maximum allowed value."""
    LESS_THAN

    """Input value should be greater than or equal to minimum allowed value."""
    GREATER_THAN_OR_EQUAL_TO

    """Input value should be less or equal to maximum allowed value."""
    LESS_THAN_OR_EQUAL_TO

    """Checkout is already completed."""
    ALREADY_COMPLETED

    """Checkout is locked."""
    LOCKED

    """Input value is not supported."""
    NOT_SUPPORTED

    """Input email contains an invalid domain name."""
    BAD_DOMAIN

    """Input Zip is invalid for country provided."""
    INVALID_FOR_COUNTRY

    """Input Zip is invalid for country and province provided."""
    INVALID_FOR_COUNTRY_AND_PROVINCE

    """Invalid state in country."""
    INVALID_STATE_IN_COUNTRY

    """Invalid province in country."""
    INVALID_PROVINCE_IN_COUNTRY

    """Invalid region in country."""
    INVALID_REGION_IN_COUNTRY

    """Shipping rate expired."""
    SHIPPING_RATE_EXPIRED

    """Gift card cannot be applied to a checkout that contains a gift card."""
    GIFT_CARD_UNUSABLE

    """Gift card is disabled."""
    GIFT_CARD_DISABLED

    """Gift card code is invalid."""
    GIFT_CARD_CODE_INVALID

    """Gift card has already been applied."""
    GIFT_CARD_ALREADY_APPLIED

    """Gift card currency does not match checkout currency."""
    GIFT_CARD_CURRENCY_MISMATCH

    """Gift card is expired."""
    GIFT_CARD_EXPIRED

    """Gift card has no funds left."""
    GIFT_CARD_DEPLETED

    """Gift card was not found."""
    GIFT_CARD_NOT_FOUND

    """Cart does not meet discount requirements notice."""
    CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE

    """Discount expired."""
    DISCOUNT_EXPIRED

    """Discount disabled."""
    DISCOUNT_DISABLED

    """Discount limit reached."""
    DISCOUNT_LIMIT_REACHED

    """Discount not found."""
    DISCOUNT_NOT_FOUND

    """Customer already used once per customer discount notice."""
    CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE

    """Checkout is already completed."""
    EMPTY

    """Not enough in stock."""
    NOT_ENOUGH_IN_STOCK

    """Missing payment input."""
    MISSING_PAYMENT_INPUT

    """The amount of the payment does not match the value to be paid."""
    TOTAL_PRICE_MISMATCH

    """Line item was not found in checkout."""
    LINE_ITEM_NOT_FOUND

}

"""Possible error codes that could be returned by a payment mutation."""
enum PaymentErrorCode{
    """Input value is blank."""
    BLANK

    """Input value is invalid."""
    INVALID

    """Input value is too long."""
    TOO_LONG
}

"""A monetary value with currency.

To format currencies, combine this type's amount and currencyCode fields with your client's locale.

For example, in JavaScript you could use Intl.NumberFormat:

new Intl.NumberFormat(locale, {
style: 'currency',
currency: currencyCode
}).format(amount);
Other formatting libraries include:

iOS - NumberFormatter
Android - NumberFormat
PHP - NumberFormatter
For a more general solution, the [Unicode CLDR number formatting database] is available with many implementations (such as TwitterCldr).

"""
type Money{
    """BigDecimal money amount."""
    amount: BigDecimal!

    """Currency of the money."""
    currencyCode: CurrencyCode!

    formatted: String!
}

"""https://schema.org/Order An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer."""
type Order implements Node{
    """
    acceptedOffer    Offer    The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
    billingAddress    PostalAddress    The billing address for the order.
    broker    Organization  or Person    An entity that arranges for an exchange between a buyer and a seller. In most cases a broker never acquires or releases ownership of a product or service involved in an exchange. If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred. Supersedes bookingAgent."""
    broker:    Party

    """confirmationNumber    Text    A number that confirms the given order or payment has been received.
    customer    Organization  or Person    Party placing the order or paying the invoice."""
    customer:    Party

    """discount    Number  or Text    Any discount applied (to an Order).
    discountCode    Text    Code used to redeem a discount.
    discountCurrency    Text    The currency of the discount.

    Use standard formats: ISO 4217 currency format e.g. "USD"; Ticker symbol for cryptocurrencies e.g. "BTC"; well known names for Local Exchange Tradings Systems (LETS) and other currency types e.g. "Ithaca HOUR".

    isGift    Boolean    Was the offer accepted as a gift for someone other than the buyer."""
    isGift: Boolean

    """orderDate    DateTime  or DateTime    DateTime order was placed."""
    orderDate: DateTime

    """orderDelivery    ParcelDelivery    The delivery of the parcel related to this order or order item."""
    orderDelivery:    ParcelDelivery

    """orderNumber    Text    The identifier of the transaction."""
    orderNumber: String

    """orderStatus    OrderStatus    The current status of the order."""
    orderStatus:    OrderStatus

    """orderedItem    OrderItem  or Product  or Service    The item ordered."""
    orderedItem:    [OrderItem]

    """partOfInvoice    Invoice    The order is being paid as part of the referenced Invoice.
    paymentDueDate    DateTime  or DateTime    The date that payment is due. Supersedes paymentDue.
    paymentMethod    PaymentMethod    The name of the credit card or other method of payment for the order.
    paymentMethodId    Text    An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
    paymentUrl    URL    The URL for sending a payment.
    seller    Organization  or Person    An entity which offers (sells / leases / lends / loans) the services / goods. A seller may also be a provider. Supersedes merchant, vendor.
    """
    seller:    Organization

    """[Potential Action:There is an action status for potential actions, if you want to markup actions that have not occurred yet but are possible. potentialAction is defined by schema.org as “an idealized action in which this thing would play an 'object' role”](https://ondyr.com/what-is-action-schema/)"""
    potentialActions: [Action]

    cartId: ID!
    email: String!
    shipping: PostalAddress!
    billing: PostalAddress!
    subTotal: Money!
    shippingTotal: Money!
    taxTotal: Money!
    grandTotal: Money!
    totalItems: Int!
    totalUniqueItems: Int!
    notes: String
    attributes: [CustomAttribute!]!
    createdAt: DateTime!
    updatedAt: DateTime!

    """The id of the object."""
    id: ID!
}

"""https://schema.org/OrderItem
An order item is a line of an order. It includes the quantity and shipping details of a bought offer."""
type OrderItem implements Node{

    """partOfOrder    Order    The overall order the items in this delivery were included in."""
    partOfOrder:    Order

    """orderDelivery    ParcelDelivery    The delivery of the parcel related to this order or order item."""
    orderDelivery:    ParcelDelivery

    """orderItemNumber    Text    The identifier of the order item."""
    orderItemNumber: String

    """orderItemStatus    OrderStatus    The current status of the order item."""
    orderItemStatus:    OrderStatus

    """orderQuantity    Number    The number of the item ordered. If the property is not set, assume the quantity is one."""
    orderQuantity: Int

    """orderedItem    OrderItem  or Product  or Service"""
    orderedItem: OrderableThing

    """[Potential Action:There is an action status for potential actions, if you want to markup actions that have not occurred yet but are possible. potentialAction is defined by schema.org as “an idealized action in which this thing would play an 'object' role”](https://ondyr.com/what-is-action-schema/)"""
    potentialActions: [Action]

    type: CartItemType!
    images: [String]
    unitTotal: Money!
    lineTotal: Money!
    quantity: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
    attributes: [CustomAttribute!]!

    """The id of the object."""
    id: ID!
}

enum OrderStatus{
    OrderCancelled
    OrderDelivered
    OrderInTransit
    OrderPaymentDue
    OrderUNPAID
    OrderPAID
    OrderPickupAvailable
    OrderProblem
    OrderProcessing
    OrderReturned
}


type ShippingRate{
    id: ID
}

"""https://schema.org/ParcelDelivery The delivery of a parcel either via the postal service or a commercial service."""
type ParcelDelivery implements Node{

    """deliveryAddress    PostalAddress    Destination address."""
    deliveryAddress:    PostalAddress

    """deliveryStatus    DeliveryEvent    New entry added as the package passes through each leg of its journey (from shipment to final delivery).
    expectedArrivalFrom    DateTime  or DateTime    The earliest date the package may arrive."""
    expectedArrivalFrom: DateTime

    """expectedArrivalUntil    DateTime  or DateTime    The latest date the package may arrive."""
    expectedArrivalUntil: DateTime

    """hasDeliveryMethod    DeliveryMethod    Method used for delivery or shipping.
    itemShipped    Product    Item(s) being shipped."""
    itemShipped:    [Product]

    """originAddress    PostalAddress    Shipper's address."""
    originAddress:    PostalAddress

    """partOfOrder    Order    The overall order the items in this delivery were included in."""
    partOfOrder:    Order

    """provider    Organization  or Person    The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller. Supersedes carrier."""
    provider:    Organization

    """trackingNumber    Text    Shipper tracking number."""
    trackingNumber: String

    """trackingUrl    URL    Tracking url for the parcel delivery."""
    trackingUrl:    String

    """The id of the object."""
    id: ID!
}
